
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="X-Csrf-Token" content="74af6929gd5ha1a6661a1851231he320"/>
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="-1">
    <meta name="google-site-verification" content="OTd2dN5x4nS4OPknPI9JFg36fKxjqY0i1PSfFPv_J90"/>
    <meta property="fb:admins" content="100001352546622" />
    <meta property="og:image" content="http://worker.codeforces.ru/static/images/codeforces-vk-square-ru.png"/>
    <meta property="og:title" content="Задачи - Codeforces"/>
    <meta property="og:site_name" content="Codeforces"/>
    
    <meta name="cc" content="14gdsigg1zs8e"/>
    
    <meta name="verify-reformal" content="f56f99fd7e087fb6ccb48ef2" />
    <title>Задачи - Codeforces</title>
        <meta name="description" content="Codeforces. Соревнования и олимпиады по информатике и программированию, сообщество программистов" />
        <meta name="keywords" content="программирование информатика контест олимпиада алгоритмы c++ java графы vkcup" />
    <meta name="robots" content="index, follow" />

    <link href="http://worker.codeforces.ru/static/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Cuprum&subset=latin,cyrillic' rel='stylesheet' type='text/css'>

    <HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<!--CombineResourcesFilter-->
    
<LINK href="http://worker.codeforces.ru/static/favicon.png" rel="shortcut icon" type="image/png">
    
<LINK href="http://worker.codeforces.ru/static/css/prettify.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/clear.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/style.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/ttypography.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/problem-statement.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/second-level-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/roundbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/datatable.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/topic.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/table-form.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.jgrowl.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/facebox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.wysiwyg.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.autocomplete.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/codeforces.datepick.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/colorbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.drafts.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/skins/markitup/style.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/sets/markdown/style.css" rel="stylesheet" type="text/css">

    
<SCRIPT charset="utf-8" src="//yandex.st/share/share.js" type="text/javascript"></SCRIPT>
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/sidebar-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/community.css" rel="stylesheet" type="text/css">

    <!--[if IE]>
        <style>
            #sidebar {
                padding-left: 1em;
                margin: 1em 1em 1em 0;
            }
        </style>
    <![endif]-->
    
    
<SCRIPT src="http://worker.codeforces.ru/static/js/prettify/prettify.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery-1.8.3.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/sockjs-0.2.1.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/vertxbus-1.2.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.easing.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.lavalamp.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.jgrowl.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/facebox.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.wysiwyg.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.colorpicker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.table.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.image.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.link.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.autocomplete.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.datepick.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ie6blocker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.colorbox-min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ba-bbq.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.drafts.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/codeforces.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/jquery.markitup.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/sets/markdown/set.js" type="text/javascript"></SCRIPT>
    <!--/CombineResourcesFilter-->
</HEAD>
</HTML>

        <script type="text/javascript" src="http://worker.codeforces.ru/static/js/jquery.datepick-ru.js"></script>
        <script src="http://vk.com/js/api/openapi.js" type="text/javascript"></script>
</head>
<body><span style='display:none;' class='csrf-token' data-csrf='74af6929gd5ha1a6661a1851231he320'>&nbsp;</span>
<!-- Codeforces javascripts. -->
<script type="text/javascript">
    VK.init({apiId: 1961905});
</script>

<script type="text/javascript">
    if (window.parent.frames.length > 0) {
        window.stop();
    }
</script>

    <script type="text/javascript">
        $(document).ready(function() {
    $.ajaxPrefilter(function(options, originalOptions, xhr) {
        var csrf = Codeforces.getCsrfToken();

        if (csrf) {
            var data = originalOptions.data;
            if (originalOptions.data !== undefined) {
                if (Object.prototype.toString.call(originalOptions.data) === '[object String]') {
                    data = $.deparam(originalOptions.data);
                }
            } else {
                data = {};
            }
            options.data = $.param($.extend(data, { csrf_token: csrf }));
        }
    });

    window.updateTypography = function () {
        $("div.ttypography code").addClass("tt");
        $("div.ttypography pre>code").addClass("prettyprint").removeClass("tt");
        $("div.ttypography table").addClass("bordertable");
        prettyPrint();
    }

    $.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/x-www-form-urlencoded; charset=UTF-8", headers: {
        'X-Csrf-Token': Codeforces.getCsrfToken()
    }});

    window.updateTypography();

    Codeforces.signForms();

    $(".second-level-menu-list").lavaLamp({
        fx: "backout",
        speed: 1000
    });


    Codeforces.countdown();
    $("a[rel='photobox']").colorbox();


        });
    </script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-743380-5']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<div id="body">
<div style="width: 950px; margin: 0 auto;">
    <div id="header" style="position:relative;">
        <div style="float:left;">
                <a href="/"><img src="http://worker.codeforces.ru/static/images/codeforces-logo-with-upper-beta.png"/></a>
                        <div style="position:absolute;left:97px;top:40px;">
                            <a href="http://vk.com" class="logo-href">При поддержке <img
                                    style="position:relative;top:5px;" src="http://worker.codeforces.ru/static/images/vkontakte-tiny-ru.png"/></a>
                        </div>
        </div>
        <div class="lang">
            <div style="text-align: right;">
                <a href="?locale=en"><img src="http://worker.codeforces.ru/static/images/flags/24/gb.png" title="In English" alt="In English"/></a>
                <a href="?locale=ru"><img src="http://worker.codeforces.ru/static/images/flags/24/ru.png" title="По-русски" alt="По-русски"/></a>
            </div>
        </div>
        <br style="clear: both;"/>
    </div>

    <div style="text-align: center;font-size: 18px;margin-bottom: 0.5em;"
         class="caption">Codeforces Round #119 (Div. 2)</div>
    <div style="border-top: 1px solid #ccc; height: 1em;"></div>

        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A. Разрежь ленточку</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>У Поликарпа есть ленточка длины <span class="tex-span"><i>n</i></span>. Он хочет разрезать ее так, чтобы выполнялись два условия: <ul> <li> После разрезания, каждый кусочек ленточки должен быть длины <span class="tex-span"><i>a</i></span>, <span class="tex-span"><i>b</i></span> или <span class="tex-span"><i>c</i></span>. </li><li> Количество кусочков ленточки после разрезания должно быть как можно больше. </li></ul></p><p>Помогите Поликарпу, найдите количество кусочков ленточки после требуемого разрезания.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записано через пробел четыре целых числа <span class="tex-span"><i>n</i></span>, <span class="tex-span"><i>a</i></span>, <span class="tex-span"><i>b</i></span> и <span class="tex-span"><i>c</i></span> <span class="tex-span">(1 ≤ <i>n</i>, <i>a</i>, <i>b</i>, <i>c</i> ≤ 4000)</span> — длина исходной ленточки и разрешенные длины кусочков ленточки после разрезания, соответственно. Числа <span class="tex-span"><i>a</i></span>, <span class="tex-span"><i>b</i></span> и <span class="tex-span"><i>c</i></span> могут совпадать.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите одно число — максимально возможное количество кусочков ленточки. Гарантируется, что существует хотя бы одно корректное разрезание ленточки.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>5 5 3 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>7 5 5 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом тестовом примере нужно разрезать ленточку на два кусочка: один из них длины 2, второй длины 3.</p><p>Во втором примере нужно разрезать ленточку на два кусочка: один из них длины 5, второй длины 2.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B. Посчитай ромбы</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Задано два целых положительных числа <span class="tex-span"><i>w</i></span> и <span class="tex-span"><i>h</i></span>. Требуется посчитать количество ромбов, которые обладают следующими свойствами: <ul> <li> Имеют положительную площадь. </li><li> Вершины находятся в целочисленных точках. </li><li> Все вершины ромба находятся внутри или на границе прямоугольника с вершинами в точках <span class="tex-span">(0, 0)</span>, <span class="tex-span">(<i>w</i>, 0)</span>, <span class="tex-span">(<i>w</i>, <i>h</i>)</span>, <span class="tex-span">(0, <i>h</i>)</span>. Другими словами, для всех вершин <span class="tex-span">(<i>x</i><sub class="lower-index"><i>i</i></sub>, <i>y</i><sub class="lower-index"><i>i</i></sub>)</span> ромба должны выполняться неравенства <span class="tex-span">0 ≤ <i>x</i><sub class="lower-index"><i>i</i></sub> ≤ <i>w</i></span> и <span class="tex-span">0 ≤ <i>y</i><sub class="lower-index"><i>i</i></sub> ≤ <i>h</i></span>. </li><li> Диагонали ромба параллельны осям координат. </li></ul></p><p>Посчитайте сколько таких ромбов.</p><p>Напоминаем, что <span class="tex-font-style-it">ромбом</span> называется четырёхугольник, у которого все стороны равны.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записаны два целых числа <span class="tex-span"><i>w</i></span> и <span class="tex-span"><i>h</i></span> <span class="tex-span">(1 ≤ <i>w</i>, <i>h</i> ≤ 4000)</span> — размеры прямоугольника.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите одно число — количество искомых ромбов.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-х битовых чисел на С++, вместо него рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span>, а также спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>1 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>0<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере можно построить только один ромб удовлетворяющий ограничениям. Его вершины находятся в точках <span class="tex-span">(1, 0)</span>, <span class="tex-span">(2, 1)</span>, <span class="tex-span">(1, 2)</span>, <span class="tex-span">(0, 1)</span>.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C. Перестановки </div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Счастливый PMP учится в ВУЗе на первом курсе, где он изучает алгоритмические задачи. PMP обожает алгоритмические игры.</p><p>Один студент постарше дал счастливому PMP занятную игру. PMP даны две перестановки чисел от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>, от него требуется преобразовать первую перестановку во вторую. За один шаг можно убрать из перестановки чисел последнее число и вставить его обратно в произвольное место. Другими словами, можно либо вставить последнее число между любыми двумя числами, идущими одно за другим, либо вставить число в начало перестановки.</p><p>Счастливый PMP знает алгоритм, решающий эту задачу, но он слишком медленный. PMP хочет знать минимальное количество шагов, за которое он может преобразовать первую перестановку во вторую.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записано единственное целое число <span class="tex-span"><i>n</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 2·10<sup class="upper-index">5</sup></span>) количество чисел в каждой из двух заданных перестановок.</p><p>В следующей строке записано <span class="tex-span"><i>n</i></span> целых чисел, разделенных пробелом — первая перестановка. Каждое число от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> встретится в перестановке ровно один раз. </p><p>Следующая строка описывает вторую перестановку в аналогичном формате.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите единственное целое число, обозначающее минимальное количество шагов, необходимых для преобразования первой перестановки во вторую.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3<br />3 2 1<br />1 2 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5<br />1 2 3 4 5<br />1 5 2 3 4<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5<br />1 5 2 3 4<br />1 2 3 4 5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере PMP берет с конца списка число 1 и вставляет его в начало. Потом берет число 2 и вставляет его между 1 и 3.</p><p>Во втором примере он берет число 5 и вставляет его после 1.</p><p>В третьем примере последовательность шагов выглядит следующим образом: <ul> <li>1 5 2 3 4 </li><li>1 4 5 2 3 </li><li>1 3 4 5 2 </li><li>1 2 3 4 5 </li></ul> Так что ему надо три хода.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D. Алгогонки</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>PMP готовится стать воином. Он много тренируется, но результаты пока не очень. На этот раз вместо контестов по программированию он решил состязаться в гонках, чтобы поднять дух победы. Он решил выбрать соревнование, которое помимо прочего использует его алгоритмические навыки.</p><p>AlgoRace — особая лига гонщиков, где разные команды соревнуются в стране с <span class="tex-span"><i>n</i></span> городами. Города пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>. Каждые два различных города страны связаны друг с другом двусторонней дорогой. Каждая команда должна представить на соревновании одного водителя и набор автомобилей.</p><p>Соревнование проводится в <span class="tex-span"><i>r</i></span> раундов. На <span class="tex-span"><i>i</i></span>-м раунде водители стартуют в городе <span class="tex-span"><i>s</i><sub class="lower-index"><i>i</i></sub></span>, а финишируют в городе <span class="tex-span"><i>t</i><sub class="lower-index"><i>i</i></sub></span>. В течении этого раунда водителям разрешено менять автомобили не более <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span> раз. Поменять автомобиль можно в любом городе, это действие не занимает времени. Один автомобиль можно использовать несколько раз за раунд, но общее число пересадок не должно превышать <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>. Водители могут свободно выбирать свой путь к месту назначения.</p><p>PMP-воин подготовил <span class="tex-span"><i>m</i></span> типов специально сконструированных автомобилей. Кроме того, PMP водит по-разному в зависимости от свойств автомобиля и дороги, следовательно, автомобиль проезжает разные дороги (или одну дорогу в разных направлениях) за разное время.</p><p>PMP-воин хочет разработать лучшие стратегии выбора автомобилей и дорог в каждом раунде, чтобы максимизировать шансы выиграть кубок. Для каждого раунда надо найти минимальное время, необходимое для его прохождения.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Первая строка содержит три целых числа, разделенных пробелом <span class="tex-span"><i>n</i>, <i>m</i>, <i>r</i></span> (<span class="tex-span">2 ≤ <i>n</i> ≤ 60, 1 ≤ <i>m</i> ≤ 60, 1 ≤ <i>r</i> ≤ 10<sup class="upper-index">5</sup></span>) — количество городов, количество различных типов машин и количество раундов в соревновании, соответственно.</p><p>Затем последуют <span class="tex-span"><i>m</i></span> матриц размера <span class="tex-span"><i>n</i> × <i>n</i></span>, состоящих из целых чисел от <span class="tex-span">0</span> до <span class="tex-span">10<sup class="upper-index">6</sup></span> (включительно), описывающие время, необходимое для одной машины для того, чтобы проехать разные дороги. Целое число, которое следует <span class="tex-span"><i>k</i></span>-ым в <span class="tex-span"><i>j</i></span>-ой строке <span class="tex-span"><i>i</i></span>-й матрицы, обозначает время, за которое <span class="tex-span"><i>i</i></span>-ый автомобиль проедет дорогу из <span class="tex-span"><i>j</i></span>-го города в <span class="tex-span"><i>k</i></span>-ый город. Заданные матрицы необязательно симметричны, но их диагональ всегда нулевая.</p><p>В следующих <span class="tex-span"><i>r</i></span> строках содержатся описания раундов, <span class="tex-span"><i>i</i></span>-ая из них содержит разделенные пробелом целые числа <span class="tex-span"><i>s</i><sub class="lower-index"><i>i</i></sub>, <i>t</i><sub class="lower-index"><i>i</i></sub>, <i>k</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>s</i><sub class="lower-index"><i>i</i></sub>, <i>t</i><sub class="lower-index"><i>i</i></sub> ≤ <i>n</i>, <i>s</i><sub class="lower-index"><i>i</i></sub> ≠ <i>t</i><sub class="lower-index"><i>i</i></sub>, 0 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 1000</span>) — номер города-старта, номер города-финиша и количество допустимых пересадок в <span class="tex-span"><i>i</i></span>-ом раунде, соответственно.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Ваша задача — для каждого раунда вывести на отдельной строке минимальное время, необходимое для прохождения раунда.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>4 2 3<br />0 1 5 6<br />2 0 3 6<br />1 3 0 1<br />6 6 7 0<br />0 3 5 6<br />2 0 1 6<br />1 3 0 2<br />6 6 7 0<br />1 4 2<br />1 4 1<br />1 4 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br />4<br />3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4 2 3<br />0 7 3 3<br />8 0 10 5<br />1 1 0 4<br />8 9 2 0<br />0 3 3 9<br />7 0 4 9<br />3 8 0 4<br />4 8 9 0<br />2 3 3<br />2 1 3<br />1 2 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>4<br />5<br />3<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере во всех раундах PMP проезжает от города #1 до города #2, затем до города #3 и наконец до города #4. Но последовательность типов машин, которые он использует, в первом раунде (1, 2, 1), а во втором раунде (1, 2, 2). В третьем раунде он может поменять машину три раза. Здесь PMP использует такую же стратегию как и в первом раунде, меняя машину только два раза.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 2em;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">E. Скверная Память</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p><span class="tex-font-style-it">Zart PMP</span> вышел в финал мирового чемпионата ICPC World Finals, который проводится в китайском городе Харбине. Сходив на групповую экскурсию в Sun Island Park и насладившись выставкой снежных скульптур, PMP должен вернуться к автобусам до того, как они уедут. Но парк очень большой, и он не знает, как найти стоянку.</p><p>В парке есть <span class="tex-span"><i>n</i></span> перекрестков, пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>. Есть <span class="tex-span"><i>m</i></span> двунаправленных дорог, соединяющих некоторые пары из этих перекрестков. На <span class="tex-span"><i>k</i></span> перекрестках волонтеры ICPC помогают командам и показывают им путь к месту назначения. Волонтеры стоят в фиксированных точках и не двигаются, никакие два волонтера не стоят на одном перекрестке.</p><p>Когда PMP просит волонтера указать путь до стоянки, тот/та может описать ему весь путь. Но парк полностью покрыт льдом и снегом и все выглядит почти одинаково. Из-за этого PMP может запомнить не более <span class="tex-span"><i>q</i></span> перекрестков после каждого вопроса (не считая перекрестка, на котором он стоит в данный момент). Он всегда рассказывает волонтерам о своей слабой памяти и если нет прямого пути длиной не более <span class="tex-span"><i>q</i></span> (в количестве дорог), ведущему к стоянке, то волонтер направит PMP к другому волонтеру (расстояние до которого в количестве дорог, разумеется, не должно превышать <span class="tex-span"><i>q</i></span>). Волонтеры ICPC прекрасно знают парк и всегда указывают PMP самый лучший путь. Таким образом, если существует путь до стоянки, PMP безусловно найдет его.</p><p>Изначально PMP находится на перекрестке <span class="tex-span"><i>s</i></span>, а автобусы стоят на перекрестке <span class="tex-span"><i>t</i></span>. На перекрестке <span class="tex-span"><i>s</i></span> всегда есть волонтер. Ваша задача — найти, при каком минимальном значении <span class="tex-span"><i>q</i></span> PMP сможет найти автобусы.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записаны через пробел три целых числа <span class="tex-span"><i>n</i>, <i>m</i>, <i>k</i></span> (<span class="tex-span">2 ≤ <i>n</i> ≤ 10<sup class="upper-index">5</sup>, 0 ≤ <i>m</i> ≤ 2·10<sup class="upper-index">5</sup>, 1 ≤ <i>k</i> ≤ <i>n</i></span>) — количество перекрестков, дорог и волонтеров соответственно. В следующей строке записано через пробел <span class="tex-span"><i>k</i></span> различных целых чисел от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> включительно — номера перекрестков, на которых стоят волонтеры.</p><p>Следующие <span class="tex-span"><i>m</i></span> строк описывают дороги. В <span class="tex-span"><i>i</i></span>-ой строке записаны через пробел два целых числа <span class="tex-span"><i>u</i><sub class="lower-index"><i>i</i></sub>, <i>v</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>u</i><sub class="lower-index"><i>i</i></sub>, <i>v</i><sub class="lower-index"><i>i</i></sub> ≤ <i>n</i>, <i>u</i><sub class="lower-index"><i>i</i></sub> ≠ <i>v</i><sub class="lower-index"><i>i</i></sub></span>) — два перекрестка, соединенные <span class="tex-span"><i>i</i></span>-ой дорогой. Между любыми двумя перекрестками есть не более одной дороги.</p><p>Последняя строка входного файла содержит через пробел два целых числа <span class="tex-span"><i>s</i>, <i>t</i></span> (<span class="tex-span">1 ≤ <i>s</i>, <i>t</i> ≤ <i>n</i>, <i>s</i> ≠ <i>t</i></span>) — исходная позиция PMP, расположение автобусов. Не гарантируется, что автобусная станция достижима по дорогам парка из перекрестка с номером <span class="tex-span"><i>s</i></span>.</p><p>Гарантируется, что на перекрестке <span class="tex-span"><i>s</i></span> всегда стоит волонтер.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите на единственной строке ответ к задаче: минимальное значении <span class="tex-span"><i>q</i></span>, при котором PMP сможет найти автобусы. Если PMP не сможет найти автобусы ни при каком значении <span class="tex-span"><i>q</i></span> выведите -1. </p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>6 6 3<br />1 3 6<br />1 2<br />2 3<br />4 2<br />5 6<br />4 5<br />3 4<br />1 6<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>6 5 3<br />1 5 6<br />1 2<br />2 3<br />3 4<br />4 5<br />6 3<br />1 5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Первый пример проиллюстрирован ниже. Синим отмечены перекрестки, в которых находятся волонтеры. Пунктирная линия показывает возможный путь, для такого пути ответ <span class="tex-span"><i>q</i> = 3</span>:</p><p><center> <img class="tex-graphics" src="http://codeforces.ru/renderer/4e68ff44cee5ed26f96b0bc77ce41bbabaf17b1d.png" /> </center></p><p>Во втором примере, при <span class="tex-span"><i>q</i> = 3</span> PMP может дойти до перекрестка номер 6, а потом дойти до автобусной остановки. </p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>

    <br style="clear:both;"/>

    <div id="footer">
        <div><a href="http://codeforces.ru/">Codeforces</a> (c) Copyright 2010-2013 Михаил Мирзаянов</div>
        <div>Соревнования по программированию 2.0</div>

    </div>
</div>
</div>
</body>
</html>                                       
