
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="X-Csrf-Token" content="gf301ha1f17hahffe253a9e00ggcc425"/>
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="-1">
    <meta name="google-site-verification" content="OTd2dN5x4nS4OPknPI9JFg36fKxjqY0i1PSfFPv_J90"/>
    <meta property="fb:admins" content="100001352546622" />
    <meta property="og:image" content="http://worker.codeforces.ru/static/images/codeforces-vk-square-ru.png"/>
    <meta property="og:title" content="Задачи - Codeforces"/>
    <meta property="og:site_name" content="Codeforces"/>
    
    <meta name="cc" content="1e5uq11zsv0dx"/>
    
    <meta name="verify-reformal" content="f56f99fd7e087fb6ccb48ef2" />
    <title>Задачи - Codeforces</title>
        <meta name="description" content="Codeforces. Соревнования и олимпиады по информатике и программированию, сообщество программистов" />
        <meta name="keywords" content="программирование информатика контест олимпиада алгоритмы c++ java графы vkcup" />
    <meta name="robots" content="index, follow" />

    <link href="http://worker.codeforces.ru/static/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Cuprum&subset=latin,cyrillic' rel='stylesheet' type='text/css'>

    <HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<!--CombineResourcesFilter-->
    
<LINK href="http://worker.codeforces.ru/static/favicon.png" rel="shortcut icon" type="image/png">
    
<LINK href="http://worker.codeforces.ru/static/css/prettify.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/clear.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/style.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/ttypography.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/problem-statement.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/second-level-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/roundbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/datatable.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/topic.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/table-form.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.jgrowl.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/facebox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.wysiwyg.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.autocomplete.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/codeforces.datepick.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/colorbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.drafts.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/skins/markitup/style.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/sets/markdown/style.css" rel="stylesheet" type="text/css">

    
<SCRIPT charset="utf-8" src="//yandex.st/share/share.js" type="text/javascript"></SCRIPT>
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/sidebar-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/community.css" rel="stylesheet" type="text/css">

    <!--[if IE]>
        <style>
            #sidebar {
                padding-left: 1em;
                margin: 1em 1em 1em 0;
            }
        </style>
    <![endif]-->
    
    
<SCRIPT src="http://worker.codeforces.ru/static/js/prettify/prettify.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery-1.8.3.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/sockjs-0.2.1.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/vertxbus-1.2.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.easing.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.lavalamp.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.jgrowl.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/facebox.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.wysiwyg.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.colorpicker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.table.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.image.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.link.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.autocomplete.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.datepick.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ie6blocker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.colorbox-min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ba-bbq.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.drafts.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/codeforces.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/jquery.markitup.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/sets/markdown/set.js" type="text/javascript"></SCRIPT>
    <!--/CombineResourcesFilter-->
</HEAD>
</HTML>

        <script type="text/javascript" src="http://worker.codeforces.ru/static/js/jquery.datepick-ru.js"></script>
        <script src="http://vk.com/js/api/openapi.js" type="text/javascript"></script>
</head>
<body><span style='display:none;' class='csrf-token' data-csrf='gf301ha1f17hahffe253a9e00ggcc425'>&nbsp;</span>
<!-- Codeforces javascripts. -->
<script type="text/javascript">
    VK.init({apiId: 1961905});
</script>

<script type="text/javascript">
    if (window.parent.frames.length > 0) {
        window.stop();
    }
</script>

    <script type="text/javascript">
        $(document).ready(function() {
    $.ajaxPrefilter(function(options, originalOptions, xhr) {
        var csrf = Codeforces.getCsrfToken();

        if (csrf) {
            var data = originalOptions.data;
            if (originalOptions.data !== undefined) {
                if (Object.prototype.toString.call(originalOptions.data) === '[object String]') {
                    data = $.deparam(originalOptions.data);
                }
            } else {
                data = {};
            }
            options.data = $.param($.extend(data, { csrf_token: csrf }));
        }
    });

    window.updateTypography = function () {
        $("div.ttypography code").addClass("tt");
        $("div.ttypography pre>code").addClass("prettyprint").removeClass("tt");
        $("div.ttypography table").addClass("bordertable");
        prettyPrint();
    }

    $.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/x-www-form-urlencoded; charset=UTF-8", headers: {
        'X-Csrf-Token': Codeforces.getCsrfToken()
    }});

    window.updateTypography();

    Codeforces.signForms();

    $(".second-level-menu-list").lavaLamp({
        fx: "backout",
        speed: 1000
    });


    Codeforces.countdown();
    $("a[rel='photobox']").colorbox();


        });
    </script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-743380-5']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<div id="body">
<div style="width: 950px; margin: 0 auto;">
    <div id="header" style="position:relative;">
        <div style="float:left;">
                <a href="/"><img src="http://worker.codeforces.ru/static/images/codeforces-logo-with-upper-beta.png"/></a>
                        <div style="position:absolute;left:97px;top:40px;">
                            <a href="http://vk.com" class="logo-href">При поддержке <img
                                    style="position:relative;top:5px;" src="http://worker.codeforces.ru/static/images/vkontakte-tiny-ru.png"/></a>
                        </div>
        </div>
        <div class="lang">
            <div style="text-align: right;">
                <a href="?locale=en"><img src="http://worker.codeforces.ru/static/images/flags/24/gb.png" title="In English" alt="In English"/></a>
                <a href="?locale=ru"><img src="http://worker.codeforces.ru/static/images/flags/24/ru.png" title="По-русски" alt="По-русски"/></a>
            </div>
        </div>
        <br style="clear: both;"/>
    </div>

    <div style="text-align: center;font-size: 18px;margin-bottom: 0.5em;"
         class="caption">Codeforces Round #119 (Div. 1)</div>
    <div style="border-top: 1px solid #ccc; height: 1em;"></div>

        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A. Перестановки </div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Счастливый PMP учится в ВУЗе на первом курсе, где он изучает алгоритмические задачи. PMP обожает алгоритмические игры.</p><p>Один студент постарше дал счастливому PMP занятную игру. PMP даны две перестановки чисел от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>, от него требуется преобразовать первую перестановку во вторую. За один шаг можно убрать из перестановки чисел последнее число и вставить его обратно в произвольное место. Другими словами, можно либо вставить последнее число между любыми двумя числами, идущими одно за другим, либо вставить число в начало перестановки.</p><p>Счастливый PMP знает алгоритм, решающий эту задачу, но он слишком медленный. PMP хочет знать минимальное количество шагов, за которое он может преобразовать первую перестановку во вторую.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записано единственное целое число <span class="tex-span"><i>n</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 2·10<sup class="upper-index">5</sup></span>) количество чисел в каждой из двух заданных перестановок.</p><p>В следующей строке записано <span class="tex-span"><i>n</i></span> целых чисел, разделенных пробелом — первая перестановка. Каждое число от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> встретится в перестановке ровно один раз. </p><p>Следующая строка описывает вторую перестановку в аналогичном формате.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите единственное целое число, обозначающее минимальное количество шагов, необходимых для преобразования первой перестановки во вторую.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3<br />3 2 1<br />1 2 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5<br />1 2 3 4 5<br />1 5 2 3 4<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5<br />1 5 2 3 4<br />1 2 3 4 5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере PMP берет с конца списка число 1 и вставляет его в начало. Потом берет число 2 и вставляет его между 1 и 3.</p><p>Во втором примере он берет число 5 и вставляет его после 1.</p><p>В третьем примере последовательность шагов выглядит следующим образом: <ul> <li>1 5 2 3 4 </li><li>1 4 5 2 3 </li><li>1 3 4 5 2 </li><li>1 2 3 4 5 </li></ul> Так что ему надо три хода.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B. Алгогонки</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>PMP готовится стать воином. Он много тренируется, но результаты пока не очень. На этот раз вместо контестов по программированию он решил состязаться в гонках, чтобы поднять дух победы. Он решил выбрать соревнование, которое помимо прочего использует его алгоритмические навыки.</p><p>AlgoRace — особая лига гонщиков, где разные команды соревнуются в стране с <span class="tex-span"><i>n</i></span> городами. Города пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>. Каждые два различных города страны связаны друг с другом двусторонней дорогой. Каждая команда должна представить на соревновании одного водителя и набор автомобилей.</p><p>Соревнование проводится в <span class="tex-span"><i>r</i></span> раундов. На <span class="tex-span"><i>i</i></span>-м раунде водители стартуют в городе <span class="tex-span"><i>s</i><sub class="lower-index"><i>i</i></sub></span>, а финишируют в городе <span class="tex-span"><i>t</i><sub class="lower-index"><i>i</i></sub></span>. В течении этого раунда водителям разрешено менять автомобили не более <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span> раз. Поменять автомобиль можно в любом городе, это действие не занимает времени. Один автомобиль можно использовать несколько раз за раунд, но общее число пересадок не должно превышать <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>. Водители могут свободно выбирать свой путь к месту назначения.</p><p>PMP-воин подготовил <span class="tex-span"><i>m</i></span> типов специально сконструированных автомобилей. Кроме того, PMP водит по-разному в зависимости от свойств автомобиля и дороги, следовательно, автомобиль проезжает разные дороги (или одну дорогу в разных направлениях) за разное время.</p><p>PMP-воин хочет разработать лучшие стратегии выбора автомобилей и дорог в каждом раунде, чтобы максимизировать шансы выиграть кубок. Для каждого раунда надо найти минимальное время, необходимое для его прохождения.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Первая строка содержит три целых числа, разделенных пробелом <span class="tex-span"><i>n</i>, <i>m</i>, <i>r</i></span> (<span class="tex-span">2 ≤ <i>n</i> ≤ 60, 1 ≤ <i>m</i> ≤ 60, 1 ≤ <i>r</i> ≤ 10<sup class="upper-index">5</sup></span>) — количество городов, количество различных типов машин и количество раундов в соревновании, соответственно.</p><p>Затем последуют <span class="tex-span"><i>m</i></span> матриц размера <span class="tex-span"><i>n</i> × <i>n</i></span>, состоящих из целых чисел от <span class="tex-span">0</span> до <span class="tex-span">10<sup class="upper-index">6</sup></span> (включительно), описывающие время, необходимое для одной машины для того, чтобы проехать разные дороги. Целое число, которое следует <span class="tex-span"><i>k</i></span>-ым в <span class="tex-span"><i>j</i></span>-ой строке <span class="tex-span"><i>i</i></span>-й матрицы, обозначает время, за которое <span class="tex-span"><i>i</i></span>-ый автомобиль проедет дорогу из <span class="tex-span"><i>j</i></span>-го города в <span class="tex-span"><i>k</i></span>-ый город. Заданные матрицы необязательно симметричны, но их диагональ всегда нулевая.</p><p>В следующих <span class="tex-span"><i>r</i></span> строках содержатся описания раундов, <span class="tex-span"><i>i</i></span>-ая из них содержит разделенные пробелом целые числа <span class="tex-span"><i>s</i><sub class="lower-index"><i>i</i></sub>, <i>t</i><sub class="lower-index"><i>i</i></sub>, <i>k</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>s</i><sub class="lower-index"><i>i</i></sub>, <i>t</i><sub class="lower-index"><i>i</i></sub> ≤ <i>n</i>, <i>s</i><sub class="lower-index"><i>i</i></sub> ≠ <i>t</i><sub class="lower-index"><i>i</i></sub>, 0 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 1000</span>) — номер города-старта, номер города-финиша и количество допустимых пересадок в <span class="tex-span"><i>i</i></span>-ом раунде, соответственно.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Ваша задача — для каждого раунда вывести на отдельной строке минимальное время, необходимое для прохождения раунда.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>4 2 3<br />0 1 5 6<br />2 0 3 6<br />1 3 0 1<br />6 6 7 0<br />0 3 5 6<br />2 0 1 6<br />1 3 0 2<br />6 6 7 0<br />1 4 2<br />1 4 1<br />1 4 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br />4<br />3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4 2 3<br />0 7 3 3<br />8 0 10 5<br />1 1 0 4<br />8 9 2 0<br />0 3 3 9<br />7 0 4 9<br />3 8 0 4<br />4 8 9 0<br />2 3 3<br />2 1 3<br />1 2 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>4<br />5<br />3<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере во всех раундах PMP проезжает от города #1 до города #2, затем до города #3 и наконец до города #4. Но последовательность типов машин, которые он использует, в первом раунде (1, 2, 1), а во втором раунде (1, 2, 2). В третьем раунде он может поменять машину три раза. Здесь PMP использует такую же стратегию как и в первом раунде, меняя машину только два раза.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C. Скверная Память</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p><span class="tex-font-style-it">Zart PMP</span> вышел в финал мирового чемпионата ICPC World Finals, который проводится в китайском городе Харбине. Сходив на групповую экскурсию в Sun Island Park и насладившись выставкой снежных скульптур, PMP должен вернуться к автобусам до того, как они уедут. Но парк очень большой, и он не знает, как найти стоянку.</p><p>В парке есть <span class="tex-span"><i>n</i></span> перекрестков, пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>. Есть <span class="tex-span"><i>m</i></span> двунаправленных дорог, соединяющих некоторые пары из этих перекрестков. На <span class="tex-span"><i>k</i></span> перекрестках волонтеры ICPC помогают командам и показывают им путь к месту назначения. Волонтеры стоят в фиксированных точках и не двигаются, никакие два волонтера не стоят на одном перекрестке.</p><p>Когда PMP просит волонтера указать путь до стоянки, тот/та может описать ему весь путь. Но парк полностью покрыт льдом и снегом и все выглядит почти одинаково. Из-за этого PMP может запомнить не более <span class="tex-span"><i>q</i></span> перекрестков после каждого вопроса (не считая перекрестка, на котором он стоит в данный момент). Он всегда рассказывает волонтерам о своей слабой памяти и если нет прямого пути длиной не более <span class="tex-span"><i>q</i></span> (в количестве дорог), ведущему к стоянке, то волонтер направит PMP к другому волонтеру (расстояние до которого в количестве дорог, разумеется, не должно превышать <span class="tex-span"><i>q</i></span>). Волонтеры ICPC прекрасно знают парк и всегда указывают PMP самый лучший путь. Таким образом, если существует путь до стоянки, PMP безусловно найдет его.</p><p>Изначально PMP находится на перекрестке <span class="tex-span"><i>s</i></span>, а автобусы стоят на перекрестке <span class="tex-span"><i>t</i></span>. На перекрестке <span class="tex-span"><i>s</i></span> всегда есть волонтер. Ваша задача — найти, при каком минимальном значении <span class="tex-span"><i>q</i></span> PMP сможет найти автобусы.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записаны через пробел три целых числа <span class="tex-span"><i>n</i>, <i>m</i>, <i>k</i></span> (<span class="tex-span">2 ≤ <i>n</i> ≤ 10<sup class="upper-index">5</sup>, 0 ≤ <i>m</i> ≤ 2·10<sup class="upper-index">5</sup>, 1 ≤ <i>k</i> ≤ <i>n</i></span>) — количество перекрестков, дорог и волонтеров соответственно. В следующей строке записано через пробел <span class="tex-span"><i>k</i></span> различных целых чисел от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> включительно — номера перекрестков, на которых стоят волонтеры.</p><p>Следующие <span class="tex-span"><i>m</i></span> строк описывают дороги. В <span class="tex-span"><i>i</i></span>-ой строке записаны через пробел два целых числа <span class="tex-span"><i>u</i><sub class="lower-index"><i>i</i></sub>, <i>v</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>u</i><sub class="lower-index"><i>i</i></sub>, <i>v</i><sub class="lower-index"><i>i</i></sub> ≤ <i>n</i>, <i>u</i><sub class="lower-index"><i>i</i></sub> ≠ <i>v</i><sub class="lower-index"><i>i</i></sub></span>) — два перекрестка, соединенные <span class="tex-span"><i>i</i></span>-ой дорогой. Между любыми двумя перекрестками есть не более одной дороги.</p><p>Последняя строка входного файла содержит через пробел два целых числа <span class="tex-span"><i>s</i>, <i>t</i></span> (<span class="tex-span">1 ≤ <i>s</i>, <i>t</i> ≤ <i>n</i>, <i>s</i> ≠ <i>t</i></span>) — исходная позиция PMP, расположение автобусов. Не гарантируется, что автобусная станция достижима по дорогам парка из перекрестка с номером <span class="tex-span"><i>s</i></span>.</p><p>Гарантируется, что на перекрестке <span class="tex-span"><i>s</i></span> всегда стоит волонтер.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите на единственной строке ответ к задаче: минимальное значении <span class="tex-span"><i>q</i></span>, при котором PMP сможет найти автобусы. Если PMP не сможет найти автобусы ни при каком значении <span class="tex-span"><i>q</i></span> выведите -1. </p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>6 6 3<br />1 3 6<br />1 2<br />2 3<br />4 2<br />5 6<br />4 5<br />3 4<br />1 6<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>6 5 3<br />1 5 6<br />1 2<br />2 3<br />3 4<br />4 5<br />6 3<br />1 5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Первый пример проиллюстрирован ниже. Синим отмечены перекрестки, в которых находятся волонтеры. Пунктирная линия показывает возможный путь, для такого пути ответ <span class="tex-span"><i>q</i> = 3</span>:</p><p><center> <img class="tex-graphics" src="http://codeforces.ru/renderer/4e68ff44cee5ed26f96b0bc77ce41bbabaf17b1d.png" /> </center></p><p>Во втором примере, при <span class="tex-span"><i>q</i> = 3</span> PMP может дойти до перекрестка номер 6, а потом дойти до автобусной остановки. </p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D. Контракт с БАПом</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>В последней войне PMP победил всех своих соперников и вышел в финал. Но после окончания полуфинала зло ударило его в спину и убило! Упокой Господь его душу.</p><p>Перед смертью PMP подписал контракт с быстрыми автобусными перевозками (БАП), которые улучшают общественный транспорт за счет оптимизации оценки времени путешествия. Вы должны помочь PMP закончить его последний контракт.</p><p>Каждая линия БАП — это прямая, проходящая через <span class="tex-span"><i>n</i></span> перекрестков. На каждом перекрестке есть светофор, который циклически меняется от зеленого к красному. Он начинает светиться зеленым в нулевой момент времени. Во время зеленой фазы, которая длится <span class="tex-span"><i>g</i></span> секунд, транспорт может проезжать. После зеленой фазы цвет меняется на красный и остается таким <span class="tex-span"><i>r</i></span> секунд. Во время красной фазы транспорту запрещено проезжать. Если транспортное средство достигает перекрестка ровно в тот момент, когда светофор меняется на красный, оно должно остановиться, но транспортное средство может проезжать, если светофор только что изменил цвет на зеленый.</p><p><center> <img class="tex-graphics" src="http://codeforces.ru/renderer/3551ab5f6cf2ab5a078c31e72f7ad8dab272aeee.png" /> </center></p><p>Все светофоры синхронизированы, то есть во все моменты времени показывают одинаковый свет. Иными словами, период красного (и зеленого) цвета одинаковый для всех светофоров, и все они начинают гореть зеленым в нулевой момент времени.</p><p>Компания БАП рассчитала время, необходимое автобусу для того, чтобы проехать каждый участок дороги. Участок дороги — это отрезок дороги между двумя идущими подряд светофорами или станцией отправки (или прибытия). Точнее, специалисты БАП предоставляют <span class="tex-span"><i>n</i> + 1</span> положительных целых чисел <span class="tex-span"><i>l</i><sub class="lower-index"><i>i</i></sub></span> — время в секундах, необходимое автобусу для проезда по <span class="tex-span"><i>i</i></span>-му участку дороги на пути от станции отправки до станции прибытия. Число <span class="tex-span"><i>l</i><sub class="lower-index">1</sub></span> обозначает время, необходимое автобусу для преодоления расстояния между станцией отправки и первым перекрестком. Число <span class="tex-span"><i>l</i><sub class="lower-index"><i>n</i> + 1</sub></span> обозначает время от последнего перекрестка до станции прибытия.</p><p>За день <span class="tex-span"><i>q</i></span> автобусов покидают станцию отправки. Из них <span class="tex-span"><i>i</i></span>-ый автобус начинается ехать со станции отправки в момент времени <span class="tex-span"><i>t</i><sub class="lower-index"><i>i</i></sub></span> (в секундах). Аналитики БАПа хотят знать для каждого автобуса, когда он добирается до станции прибытия.</p><p>Автобус считается точкой. Автобус будет всегда двигаться, если это возможно. Автобусы не мешают друг другу.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке входного файла записаны через пробел три целых положительных числа <span class="tex-span"><i>n</i>, <i>g</i>, <i>r</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 10<sup class="upper-index">5</sup>, 2 ≤ <i>g</i> + <i>r</i> ≤ 10<sup class="upper-index">9</sup></span>) — количество перекрестков, продолжительность зеленой фазы и продолжительность красной фазы. В следующей строке записано <span class="tex-span"><i>n</i> + 1</span> целых чисел <span class="tex-span"><i>l</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>l</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>) — время, за которое преодолевается <span class="tex-span"><i>i</i></span>-ый участок дороги на пути из станции отправления к станции прибытия. </p><p>Следующая строка содержит единственное целое число <span class="tex-span"><i>q</i></span> (<span class="tex-span">1 ≤ <i>q</i> ≤ 10<sup class="upper-index">5</sup></span>) — количество автобусов за день. На <span class="tex-span"><i>i</i></span>-ой из следующих <span class="tex-span"><i>q</i></span> строк записано целое число <span class="tex-span"><i>t</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>t</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>) — время выезда <span class="tex-span"><i>i</i></span>-го автобуса со станции отправления.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>На <span class="tex-span"><i>i</i></span>-ой строке выходного файла выведите единственное целое число — время, когда <span class="tex-span"><i>i</i></span>-ый автобус достигает станции прибытия.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-х битовых чисел на С++, вместо него рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span>, а также спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>1 3 2<br />5 2<br />5<br />1<br />2<br />3<br />4<br />5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>8<br />9<br />12<br />12<br />12<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5 3 7<br />10 1 1 8 900000005 1000000000<br />3<br />1<br />10<br />1000000000<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1900000040<br />1900000040<br />2900000030<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом тестовом примере, автобусы #1, #2 и #5 достигнут станции прибытия, не останавливаясь на красный свет. Автобусам #3 и #4 придется подождать пока загорится зеленый.</p><p>Во втором примере, первый автобус должен подождать на третьем, четвертом и пятом перекрестке. Второй и третий автобусы будут ждать зеленого только на пятом перекрестке.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 2em;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">E. Райский Тур</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>История не была закончена, как думал PMP. Бог предложил ему еще один шанс перевоплотиться и вернуться к жизни. Но прежде чем он сможет вернуться, Бог сказал ему, что PMP должен расспросить <span class="tex-span"><i>n</i></span> великих людей, включая выдающихся программистов, об их жизненном опыте.</p><p>Эти люди стоят на одной прямой. Они пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> слева направо. Человек номер <span class="tex-span"><i>i</i></span> стоит в точке с координатой <span class="tex-span"><i>x</i><sub class="lower-index"><i>i</i></sub></span> <span class="tex-span">(<i>x</i><sub class="lower-index"><i>i</i></sub> &lt; <i>x</i><sub class="lower-index"><i>i</i> + 1</sub>, <i>i</i> &lt; <i>n</i>)</span>. PMP должен посетить всех этих людей одного за другим в произвольном порядке. Каждого человека надо посетить <span class="tex-font-style-bf">ровно один раз</span>. PMP начинает обход, подойдя к месту <span class="tex-span"><i>s</i></span>-го человека, после чего вступает с ним в разговор и перенимает его опыт.</p><p>Каждый раз, когда PMP хочет изменить свою позицию, он должен дать билет ангелу, и ангел относит его к месту назначения. Ангелы берут PMP в одном месте, летят к пункту назначения и приземляют его там. При перемещении они никого не посещают. Перелет от <span class="tex-span"><i>i</i></span>-го до <span class="tex-span"><i>j</i></span>-го человека занимает <span class="tex-span">|<i>x</i><sub class="lower-index"><i>i</i></sub> - <i>x</i><sub class="lower-index"><i>j</i></sub>|</span> времени. PMP может вернуться к жизни, как только он посетит всех людей.</p><p>Есть два вида ангелов: некоторые ангелы летают вправо и принимают только билеты направо. Другие летят налево и принимают только билеты налево. Есть неограниченное количество ангелов каждого типа. PMP имеет <span class="tex-span"><i>l</i></span> левых билетов и <span class="tex-span"><i>n</i> - 1 - <i>l</i></span> правых билетов.</p><p>PMP хочет вернуться к жизни как можно скорее, чтобы не упустить возможность поучаствовать в финале этого года вместо прошлогоднего финала, который он пропустил. Он хочет узнать самый быстрый способ посетить всех людей ровно по одному разу. Он также должен знать точную последовательность передвижений, которые он должен выполнить.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Первая строка входного файла содержит через пробел три целых числа <span class="tex-span"><i>n</i>, <i>l</i>, <i>s</i></span> (<span class="tex-span">2 ≤ <i>n</i> ≤ 10<sup class="upper-index">5</sup>, 0 ≤ <i>l</i> &lt; <i>n</i>, 1 ≤ <i>s</i> ≤ <i>n</i></span>) — количество людей, которых надо посетить, количество билетов налево в распоряжении PMP и его изначальное положение. Следующая строка содержит <span class="tex-span"><i>n</i></span> целых чисел через пробел. На этой строке <span class="tex-span"><i>i</i></span>-ое целое число — <span class="tex-span"><i>x</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">0 = <i>x</i><sub class="lower-index">1</sub> &lt; <i>x</i><sub class="lower-index">2</sub> &lt; ... &lt; <i>x</i><sub class="lower-index"><i>n</i></sub> ≤ 10<sup class="upper-index">9</sup></span>) — позиция <span class="tex-span"><i>i</i></span>-го человека.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Если PMP не сможет посетить всех людей с билетами, которые у него есть, выведите -1 в единственной строке выходного файла. В противном случае, выведите на первой строке минимальное количество времени, за которое PMP может посетить всех людей. На второй строке выведите <span class="tex-span"><i>n</i> - 1</span> целых чисел — номера людей, которых должен посетить PMP в порядке, формирующем оптимальное решение. Если ответов несколько, выведите любой.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-х битовых чисел на С++, вместо него рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span>, а также спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>5 2 2<br />0 10 11 21 22<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>33<br />1 3 5 4<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4 3 1<br />0 1 2 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>-1<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>7 3 2<br />0 100 200 201 301 303 305<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>409<br />1 3 4 7 6 5<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Помянем величайшего программиста всех времен, который покинул нас около года назад. Покойся с миром, Ренат Муллаханов.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>

    <br style="clear:both;"/>

    <div id="footer">
        <div><a href="http://codeforces.ru/">Codeforces</a> (c) Copyright 2010-2013 Михаил Мирзаянов</div>
        <div>Соревнования по программированию 2.0</div>

    </div>
</div>
</div>
</body>
</html>                                       
