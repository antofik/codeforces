
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="X-Csrf-Token" content="3cabag6d0d77aha2e8176h61efh9c7fb"/>
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="-1">
    <meta name="google-site-verification" content="OTd2dN5x4nS4OPknPI9JFg36fKxjqY0i1PSfFPv_J90"/>
    <meta property="fb:admins" content="100001352546622" />
    <meta property="og:image" content="http://worker.codeforces.ru/static/images/codeforces-vk-square-ru.png"/>
    <meta property="og:title" content="Задачи - Codeforces"/>
    <meta property="og:site_name" content="Codeforces"/>
    
    <meta name="cc" content="47qi74rb6add"/>
    
    <meta name="verify-reformal" content="f56f99fd7e087fb6ccb48ef2" />
    <title>Задачи - Codeforces</title>
        <meta name="description" content="Codeforces. Соревнования и олимпиады по информатике и программированию, сообщество программистов" />
        <meta name="keywords" content="программирование информатика контест олимпиада алгоритмы c++ java графы vkcup" />
    <meta name="robots" content="index, follow" />

    <link href="http://worker.codeforces.ru/static/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Cuprum&subset=latin,cyrillic' rel='stylesheet' type='text/css'>

    <HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<!--CombineResourcesFilter-->
    
<LINK href="http://worker.codeforces.ru/static/favicon.png" rel="shortcut icon" type="image/png">
    
<LINK href="http://worker.codeforces.ru/static/css/prettify.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/clear.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/style.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/ttypography.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/problem-statement.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/second-level-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/roundbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/datatable.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/topic.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/table-form.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.jgrowl.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/facebox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.wysiwyg.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.autocomplete.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/codeforces.datepick.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/colorbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.drafts.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/skins/markitup/style.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/sets/markdown/style.css" rel="stylesheet" type="text/css">

    
<SCRIPT charset="utf-8" src="//yandex.st/share/share.js" type="text/javascript"></SCRIPT>
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/sidebar-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/community.css" rel="stylesheet" type="text/css">

    <!--[if IE]>
        <style>
            #sidebar {
                padding-left: 1em;
                margin: 1em 1em 1em 0;
            }
        </style>
    <![endif]-->
    
    
<SCRIPT src="http://worker.codeforces.ru/static/js/prettify/prettify.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery-1.8.3.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/sockjs-0.2.1.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/vertxbus-1.2.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.easing.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.lavalamp.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.jgrowl.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/facebox.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.wysiwyg.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.colorpicker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.table.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.image.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.link.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.autocomplete.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.datepick.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ie6blocker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.colorbox-min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ba-bbq.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.drafts.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/codeforces.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/jquery.markitup.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/sets/markdown/set.js" type="text/javascript"></SCRIPT>
    <!--/CombineResourcesFilter-->
</HEAD>
</HTML>

        <script type="text/javascript" src="http://worker.codeforces.ru/static/js/jquery.datepick-ru.js"></script>
        <script src="http://vk.com/js/api/openapi.js" type="text/javascript"></script>
</head>
<body><span style='display:none;' class='csrf-token' data-csrf='3cabag6d0d77aha2e8176h61efh9c7fb'>&nbsp;</span>
<!-- Codeforces javascripts. -->
<script type="text/javascript">
    VK.init({apiId: 1961905});
</script>

<script type="text/javascript">
    if (window.parent.frames.length > 0) {
        window.stop();
    }
</script>

    <script type="text/javascript">
        $(document).ready(function() {
    $.ajaxPrefilter(function(options, originalOptions, xhr) {
        var csrf = Codeforces.getCsrfToken();

        if (csrf) {
            var data = originalOptions.data;
            if (originalOptions.data !== undefined) {
                if (Object.prototype.toString.call(originalOptions.data) === '[object String]') {
                    data = $.deparam(originalOptions.data);
                }
            } else {
                data = {};
            }
            options.data = $.param($.extend(data, { csrf_token: csrf }));
        }
    });

    window.updateTypography = function () {
        $("div.ttypography code").addClass("tt");
        $("div.ttypography pre>code").addClass("prettyprint").removeClass("tt");
        $("div.ttypography table").addClass("bordertable");
        prettyPrint();
    }

    $.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/x-www-form-urlencoded; charset=UTF-8", headers: {
        'X-Csrf-Token': Codeforces.getCsrfToken()
    }});

    window.updateTypography();

    Codeforces.signForms();

    $(".second-level-menu-list").lavaLamp({
        fx: "backout",
        speed: 1000
    });


    Codeforces.countdown();
    $("a[rel='photobox']").colorbox();


        });
    </script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-743380-5']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<div id="body">
<div style="width: 950px; margin: 0 auto;">
    <div id="header" style="position:relative;">
        <div style="float:left;">
            <div style="padding:1em 0 0 2px;color:#C60C30;font-size:18px;font-weight:bold;">
<a href="/abbyycup20"><img src="http://www.abbyy.ru/images/logo.gif"/></a>
<span style="padding:1.5em;position:relative;bottom:7px;">Умный Бобер ждет вас на ABBYY Cup 2.0!</span>
</div>
        </div>
        <div class="lang">
            <div style="text-align: right;">
                <a href="?locale=en"><img src="http://worker.codeforces.ru/static/images/flags/24/gb.png" title="In English" alt="In English"/></a>
                <a href="?locale=ru"><img src="http://worker.codeforces.ru/static/images/flags/24/ru.png" title="По-русски" alt="По-русски"/></a>
            </div>
        </div>
        <br style="clear: both;"/>
    </div>

    <div style="text-align: center;font-size: 18px;margin-bottom: 0.5em;"
         class="caption">Abbyy Cup 2.0 - &#1060;&#1080;&#1085;&#1072;&#1083; (&#1085;&#1077;&#1086;&#1092;. &#1090;&#1088;&#1072;&#1085;&#1089;&#1083;&#1103;&#1094;&#1080;&#1103;)</div>
    <div style="border-top: 1px solid #ccc; height: 1em;"></div>

        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A1. Бобриный вычислитель 1.0</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>3 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз удивляет! Он разработал новое вычислительное устройство, которое назвал «Бобриный вычислитель <span class="tex-span">1.0</span>». Оно является весьма специфическим и планируется для использования в различных научных задачах.</p><p>Для тестирования Умный Бобер пригласил <span class="tex-span"><i>n</i></span> ученых, пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>. <span class="tex-span"><i>i</i></span>-ый ученый принес <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span> вычислительных задач для устройства, разработанного Умным Бобром из ABBYY. Задачи <span class="tex-span"><i>i</i></span>-го ученого пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, причем они должны выполняться последовательно в описанном порядке, так как выполнение каждой задачи существенно зависит от результатов выполнения предыдущих.</p><p>Каждую задачу каждого из <span class="tex-span"><i>n</i></span> ученых характеризует одно целое число <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span>, где <span class="tex-span"><i>i</i></span> (<span class="tex-span">1 ≤ <i>i</i> ≤ <i>n</i></span>) — номер ученого, <span class="tex-span"><i>j</i></span> (<span class="tex-span">1 ≤ <i>j</i> ≤ <i>k</i><sub class="lower-index"><i>i</i></sub></span>) — номер задачи, <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span> –– количество единиц ресурсов вычислительного устройства, требуемое для выполнения данной задачи.</p><p>Разработанное Умным Бобром вычислительное устройство обладает некоторыми особенностями. Задачи на нем выполняются последовательно одна за другой. После завершения выполнения некоторой задачи и перед выполнением следующей задачи происходит выделение либо освобождение ресурсов вычислительного устройства.</p><p>Самой затратной операцией для вычислительного устройства, разработанного Умным Бобром, является освобождение ресурсов, которое работает существенно медленнее выделения. Поэтому желательно, чтобы каждая следующая задача для вычислительного устройства требовала ресурсов не меньше, чем предыдущая.</p><p>Вам дана информация о задачах, предложенных учеными для тестирования. Вам требуется расположить эти задачи в таком порядке, чтобы число соседних «плохих» пар задач в этом списке было минимально возможным. Будем называть две подряд идущие задачи в этом списке «плохой» парой, если задача, которая выполняется раньше, требует большего количества ресурсов. Не забудьте, что задачи одного и того же ученого должны выполняться в строго определенном порядке.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> — количество ученых. В каждой из следующих <span class="tex-span"><i>n</i></span> строк в целях уменьшения объёма входных данных содержатся пять целых чисел <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, 1</sub></span>, <span class="tex-span"><i>x</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>y</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>m</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">0 ≤ <i>a</i><sub class="lower-index"><i>i</i>, 1</sub> &lt; <i>m</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>, <span class="tex-span">1 ≤ <i>x</i><sub class="lower-index"><i>i</i></sub>, <i>y</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>) — количество задач <span class="tex-span"><i>i</i></span>-го ученого, требуемое количество ресурсов для первой задачи, а также три параметра для генерации последующих значений <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span>. Для всех <span class="tex-span"><i>j</i></span> от <span class="tex-span">2</span> до <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, включительно, значение <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span> следует вычислить по формуле <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub> = (<i>a</i><sub class="lower-index"><i>i</i>, <i>j</i> - 1</sub> * <i>x</i><sub class="lower-index"><i>i</i></sub> + <i>y</i><sub class="lower-index"><i>i</i></sub>)</span> <span class="tex-span"><i>mod</i></span> <span class="tex-span"><i>m</i><sub class="lower-index"><i>i</i></sub></span>, где <span class="tex-span"><i>a</i></span> <span class="tex-span"><i>mod</i></span> <span class="tex-span"><i>b</i></span> — операция взятия остатка от деления числа <span class="tex-span"><i>a</i></span> на число <span class="tex-span"><i>b</i></span>.</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 2000</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 200000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 5000</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 5000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите единственное число — количество «плохих» пар в оптимальном расположении.</p><p>Если общее количество задач не превышает <span class="tex-span">200000</span>, выведите также <img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/a16730dcbb2402871e20647c8aba55beada5c1b6.png" /> строк — оптимальное расположение задач. В каждой из этих строк выведите два целых числа, разделённых одиночным пробелом — требуемое число ресурсов для задачи и номер ученого, предложившего эту задачу, соответственно. Ученые пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> в порядке ввода.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2<br />2 1 1 1 10<br />2 3 1 1 10<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>0<br />1 1<br />2 1<br />3 2<br />4 2<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>2<br />3 10 2 3 1000<br />3 100 1 999 1000<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br />10 1<br />23 1<br />49 1<br />100 2<br />99 2<br />98 2<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span"><i>k</i><sub class="lower-index">1</sub> = 2</span>, <span class="tex-span"><i>a</i><sub class="lower-index">1, 1</sub> = 1</span>, <span class="tex-span"><i>a</i><sub class="lower-index">1, 2</sub> = 2</span>, <span class="tex-span"><i>k</i><sub class="lower-index">2</sub> = 2</span>, <span class="tex-span"><i>a</i><sub class="lower-index">2, 1</sub> = 3</span>, <span class="tex-span"><i>a</i><sub class="lower-index">2, 2</sub> = 4</span>. У нас два ученых, у каждого из которых две вычислительные задачи. Задачи первого требуют <span class="tex-span">1</span> и <span class="tex-span">2</span> единицы ресурсов, а задачи второго — <span class="tex-span">3</span> и <span class="tex-span">4</span> единицы ресурсов. Выпишем все возможные варианты для порядка вычислений (для каждой задачи указаны только требуемые для нее ресурсы): <span class="tex-span">(1, 2, 3, 4)</span>, <span class="tex-span">(1, 3, 2, 4)</span>, <span class="tex-span">(3, 1, 2, 4)</span>, <span class="tex-span">(1, 3, 4, 2)</span>, <span class="tex-span">(3, 4, 1, 2)</span>, <span class="tex-span">(3, 1, 4, 2)</span>.</p><p>В последовательности задач <span class="tex-span">(1, 3, 2, 4)</span> одна «плохая» пара (<span class="tex-span">3</span> и <span class="tex-span">2</span>), в <span class="tex-span">(3, 1, 4, 2)</span> — две «плохие» пары (<span class="tex-span">3</span> и <span class="tex-span">1</span>, <span class="tex-span">4</span> и <span class="tex-span">2</span>), а в <span class="tex-span">(1, 2, 3, 4)</span> нет «плохих» пар.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A2. Бобриный вычислитель 1.0</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>3 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз удивляет! Он разработал новое вычислительное устройство, которое назвал «Бобриный вычислитель <span class="tex-span">1.0</span>». Оно является весьма специфическим и планируется для использования в различных научных задачах.</p><p>Для тестирования Умный Бобер пригласил <span class="tex-span"><i>n</i></span> ученых, пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>. <span class="tex-span"><i>i</i></span>-ый ученый принес <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span> вычислительных задач для устройства, разработанного Умным Бобром из ABBYY. Задачи <span class="tex-span"><i>i</i></span>-го ученого пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, причем они должны выполняться последовательно в описанном порядке, так как выполнение каждой задачи существенно зависит от результатов выполнения предыдущих.</p><p>Каждую задачу каждого из <span class="tex-span"><i>n</i></span> ученых характеризует одно целое число <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span>, где <span class="tex-span"><i>i</i></span> (<span class="tex-span">1 ≤ <i>i</i> ≤ <i>n</i></span>) — номер ученого, <span class="tex-span"><i>j</i></span> (<span class="tex-span">1 ≤ <i>j</i> ≤ <i>k</i><sub class="lower-index"><i>i</i></sub></span>) — номер задачи, <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span> –– количество единиц ресурсов вычислительного устройства, требуемое для выполнения данной задачи.</p><p>Разработанное Умным Бобром вычислительное устройство обладает некоторыми особенностями. Задачи на нем выполняются последовательно одна за другой. После завершения выполнения некоторой задачи и перед выполнением следующей задачи происходит выделение либо освобождение ресурсов вычислительного устройства.</p><p>Самой затратной операцией для вычислительного устройства, разработанного Умным Бобром, является освобождение ресурсов, которое работает существенно медленнее выделения. Поэтому желательно, чтобы каждая следующая задача для вычислительного устройства требовала ресурсов не меньше, чем предыдущая.</p><p>Вам дана информация о задачах, предложенных учеными для тестирования. Вам требуется расположить эти задачи в таком порядке, чтобы число соседних «плохих» пар задач в этом списке было минимально возможным. Будем называть две подряд идущие задачи в этом списке «плохой» парой, если задача, которая выполняется раньше, требует большего количества ресурсов. Не забудьте, что задачи одного и того же ученого должны выполняться в строго определенном порядке.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> — количество ученых. В каждой из следующих <span class="tex-span"><i>n</i></span> строк в целях уменьшения объёма входных данных содержатся пять целых чисел <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, 1</sub></span>, <span class="tex-span"><i>x</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>y</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>m</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">0 ≤ <i>a</i><sub class="lower-index"><i>i</i>, 1</sub> &lt; <i>m</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>, <span class="tex-span">1 ≤ <i>x</i><sub class="lower-index"><i>i</i></sub>, <i>y</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>) — количество задач <span class="tex-span"><i>i</i></span>-го ученого, требуемое количество ресурсов для первой задачи, а также три параметра для генерации последующих значений <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span>. Для всех <span class="tex-span"><i>j</i></span> от <span class="tex-span">2</span> до <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, включительно, значение <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span> следует вычислить по формуле <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub> = (<i>a</i><sub class="lower-index"><i>i</i>, <i>j</i> - 1</sub> * <i>x</i><sub class="lower-index"><i>i</i></sub> + <i>y</i><sub class="lower-index"><i>i</i></sub>)</span> <span class="tex-span"><i>mod</i></span> <span class="tex-span"><i>m</i><sub class="lower-index"><i>i</i></sub></span>, где <span class="tex-span"><i>a</i></span> <span class="tex-span"><i>mod</i></span> <span class="tex-span"><i>b</i></span> — операция взятия остатка от деления числа <span class="tex-span"><i>a</i></span> на число <span class="tex-span"><i>b</i></span>.</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 2000</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 200000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 5000</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 5000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите единственное число — количество «плохих» пар в оптимальном расположении.</p><p>Если общее количество задач не превышает <span class="tex-span">200000</span>, выведите также <img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/a16730dcbb2402871e20647c8aba55beada5c1b6.png" /> строк — оптимальное расположение задач. В каждой из этих строк выведите два целых числа, разделённых одиночным пробелом — требуемое число ресурсов для задачи и номер ученого, предложившего эту задачу, соответственно. Ученые пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> в порядке ввода.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2<br />2 1 1 1 10<br />2 3 1 1 10<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>0<br />1 1<br />2 1<br />3 2<br />4 2<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>2<br />3 10 2 3 1000<br />3 100 1 999 1000<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br />10 1<br />23 1<br />49 1<br />100 2<br />99 2<br />98 2<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span"><i>k</i><sub class="lower-index">1</sub> = 2</span>, <span class="tex-span"><i>a</i><sub class="lower-index">1, 1</sub> = 1</span>, <span class="tex-span"><i>a</i><sub class="lower-index">1, 2</sub> = 2</span>, <span class="tex-span"><i>k</i><sub class="lower-index">2</sub> = 2</span>, <span class="tex-span"><i>a</i><sub class="lower-index">2, 1</sub> = 3</span>, <span class="tex-span"><i>a</i><sub class="lower-index">2, 2</sub> = 4</span>. У нас два ученых, у каждого из которых две вычислительные задачи. Задачи первого требуют <span class="tex-span">1</span> и <span class="tex-span">2</span> единицы ресурсов, а задачи второго — <span class="tex-span">3</span> и <span class="tex-span">4</span> единицы ресурсов. Выпишем все возможные варианты для порядка вычислений (для каждой задачи указаны только требуемые для нее ресурсы): <span class="tex-span">(1, 2, 3, 4)</span>, <span class="tex-span">(1, 3, 2, 4)</span>, <span class="tex-span">(3, 1, 2, 4)</span>, <span class="tex-span">(1, 3, 4, 2)</span>, <span class="tex-span">(3, 4, 1, 2)</span>, <span class="tex-span">(3, 1, 4, 2)</span>.</p><p>В последовательности задач <span class="tex-span">(1, 3, 2, 4)</span> одна «плохая» пара (<span class="tex-span">3</span> и <span class="tex-span">2</span>), в <span class="tex-span">(3, 1, 4, 2)</span> — две «плохие» пары (<span class="tex-span">3</span> и <span class="tex-span">1</span>, <span class="tex-span">4</span> и <span class="tex-span">2</span>), а в <span class="tex-span">(1, 2, 3, 4)</span> нет «плохих» пар.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A3. Бобриный вычислитель 1.0</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>3 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз удивляет! Он разработал новое вычислительное устройство, которое назвал «Бобриный вычислитель <span class="tex-span">1.0</span>». Оно является весьма специфическим и планируется для использования в различных научных задачах.</p><p>Для тестирования Умный Бобер пригласил <span class="tex-span"><i>n</i></span> ученых, пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>. <span class="tex-span"><i>i</i></span>-ый ученый принес <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span> вычислительных задач для устройства, разработанного Умным Бобром из ABBYY. Задачи <span class="tex-span"><i>i</i></span>-го ученого пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, причем они должны выполняться последовательно в описанном порядке, так как выполнение каждой задачи существенно зависит от результатов выполнения предыдущих.</p><p>Каждую задачу каждого из <span class="tex-span"><i>n</i></span> ученых характеризует одно целое число <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span>, где <span class="tex-span"><i>i</i></span> (<span class="tex-span">1 ≤ <i>i</i> ≤ <i>n</i></span>) — номер ученого, <span class="tex-span"><i>j</i></span> (<span class="tex-span">1 ≤ <i>j</i> ≤ <i>k</i><sub class="lower-index"><i>i</i></sub></span>) — номер задачи, <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span> –– количество единиц ресурсов вычислительного устройства, требуемое для выполнения данной задачи.</p><p>Разработанное Умным Бобром вычислительное устройство обладает некоторыми особенностями. Задачи на нем выполняются последовательно одна за другой. После завершения выполнения некоторой задачи и перед выполнением следующей задачи происходит выделение либо освобождение ресурсов вычислительного устройства.</p><p>Самой затратной операцией для вычислительного устройства, разработанного Умным Бобром, является освобождение ресурсов, которое работает существенно медленнее выделения. Поэтому желательно, чтобы каждая следующая задача для вычислительного устройства требовала ресурсов не меньше, чем предыдущая.</p><p>Вам дана информация о задачах, предложенных учеными для тестирования. Вам требуется расположить эти задачи в таком порядке, чтобы число соседних «плохих» пар задач в этом списке было минимально возможным. Будем называть две подряд идущие задачи в этом списке «плохой» парой, если задача, которая выполняется раньше, требует большего количества ресурсов. Не забудьте, что задачи одного и того же ученого должны выполняться в строго определенном порядке.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> — количество ученых. В каждой из следующих <span class="tex-span"><i>n</i></span> строк в целях уменьшения объёма входных данных содержатся пять целых чисел <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, 1</sub></span>, <span class="tex-span"><i>x</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>y</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>m</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">0 ≤ <i>a</i><sub class="lower-index"><i>i</i>, 1</sub> &lt; <i>m</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>, <span class="tex-span">1 ≤ <i>x</i><sub class="lower-index"><i>i</i></sub>, <i>y</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>) — количество задач <span class="tex-span"><i>i</i></span>-го ученого, требуемое количество ресурсов для первой задачи, а также три параметра для генерации последующих значений <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span>. Для всех <span class="tex-span"><i>j</i></span> от <span class="tex-span">2</span> до <span class="tex-span"><i>k</i><sub class="lower-index"><i>i</i></sub></span>, включительно, значение <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub></span> следует вычислить по формуле <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i>, <i>j</i></sub> = (<i>a</i><sub class="lower-index"><i>i</i>, <i>j</i> - 1</sub> * <i>x</i><sub class="lower-index"><i>i</i></sub> + <i>y</i><sub class="lower-index"><i>i</i></sub>)</span> <span class="tex-span"><i>mod</i></span> <span class="tex-span"><i>m</i><sub class="lower-index"><i>i</i></sub></span>, где <span class="tex-span"><i>a</i></span> <span class="tex-span"><i>mod</i></span> <span class="tex-span"><i>b</i></span> — операция взятия остатка от деления числа <span class="tex-span"><i>a</i></span> на число <span class="tex-span"><i>b</i></span>.</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 2000</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 200000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 5000</span>, <span class="tex-span">1 ≤ <i>k</i><sub class="lower-index"><i>i</i></sub> ≤ 5000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите единственное число — количество «плохих» пар в оптимальном расположении.</p><p>Если общее количество задач не превышает <span class="tex-span">200000</span>, выведите также <img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/a16730dcbb2402871e20647c8aba55beada5c1b6.png" /> строк — оптимальное расположение задач. В каждой из этих строк выведите два целых числа, разделённых одиночным пробелом — требуемое число ресурсов для задачи и номер ученого, предложившего эту задачу, соответственно. Ученые пронумерованы от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> в порядке ввода.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2<br />2 1 1 1 10<br />2 3 1 1 10<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>0<br />1 1<br />2 1<br />3 2<br />4 2<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>2<br />3 10 2 3 1000<br />3 100 1 999 1000<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br />10 1<br />23 1<br />49 1<br />100 2<br />99 2<br />98 2<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере <span class="tex-span"><i>n</i> = 2</span>, <span class="tex-span"><i>k</i><sub class="lower-index">1</sub> = 2</span>, <span class="tex-span"><i>a</i><sub class="lower-index">1, 1</sub> = 1</span>, <span class="tex-span"><i>a</i><sub class="lower-index">1, 2</sub> = 2</span>, <span class="tex-span"><i>k</i><sub class="lower-index">2</sub> = 2</span>, <span class="tex-span"><i>a</i><sub class="lower-index">2, 1</sub> = 3</span>, <span class="tex-span"><i>a</i><sub class="lower-index">2, 2</sub> = 4</span>. У нас два ученых, у каждого из которых две вычислительные задачи. Задачи первого требуют <span class="tex-span">1</span> и <span class="tex-span">2</span> единицы ресурсов, а задачи второго — <span class="tex-span">3</span> и <span class="tex-span">4</span> единицы ресурсов. Выпишем все возможные варианты для порядка вычислений (для каждой задачи указаны только требуемые для нее ресурсы): <span class="tex-span">(1, 2, 3, 4)</span>, <span class="tex-span">(1, 3, 2, 4)</span>, <span class="tex-span">(3, 1, 2, 4)</span>, <span class="tex-span">(1, 3, 4, 2)</span>, <span class="tex-span">(3, 4, 1, 2)</span>, <span class="tex-span">(3, 1, 4, 2)</span>.</p><p>В последовательности задач <span class="tex-span">(1, 3, 2, 4)</span> одна «плохая» пара (<span class="tex-span">3</span> и <span class="tex-span">2</span>), в <span class="tex-span">(3, 1, 4, 2)</span> — две «плохие» пары (<span class="tex-span">3</span> и <span class="tex-span">1</span>, <span class="tex-span">4</span> и <span class="tex-span">2</span>), а в <span class="tex-span">(1, 2, 3, 4)</span> нет «плохих» пар.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B1. Военные учения</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>3 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY начал сотрудничество с министерством обороны. Сейчас проводятся учения по передвижению танковых колонн. На этих учениях тестируется новый вид танков, имеющих возможность передавать информацию. Для тестирования нового вида танков на учениях проводится специальное упражнение, суть которого заключается в следующем.</p><p>Изначально колонна состоит из <span class="tex-span"><i>n</i></span> танков, последовательно пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> в порядке от начала колонны к ее концу. За все упражнение нужно передать ровно <span class="tex-span"><i>n</i></span> сообщений из начала колонны в её конец.</p><p>Передача одного сообщения происходит следующим образом. Первый в колонне танк передает сообщение одному из танков в колонне. Получивший сообщение танк передает его дальше по колонне. Так происходит, пока сообщение не получит последний танк. Возможно, что сообщение получат не все танки из колонны — важно, чтобы сообщение получил именно последний в колонне танк.</p><p>После получения сообщения последний танк (с номером <span class="tex-span"><i>n</i></span>) переезжает в начало колонны и аналогичным образом передаёт другое сообщение в конец колонны. Когда сообщение доходит до последнего танка (с номером <span class="tex-span"><i>n</i> - 1</span>), этот танк переезжает в начало и передаёт следующее сообщение в конец колонны, и так далее. Таким образом, упражнение завершается, когда колонна приобретает исходный вид, то есть сразу после перемещения танка номер <span class="tex-span">1</span> в начало колонны.</p><p>Если изначально танки в колонне располагались в порядке <span class="tex-span">1, 2, ..., <i>n</i></span>, то после первого переезда они будут располагаться в порядке <span class="tex-span"><i>n</i>, 1, ..., <i>n</i> - 1</span>, после второго переезда — в порядке <span class="tex-span"><i>n</i> - 1, <i>n</i>, 1, ..., <i>n</i> - 2</span>, и так далее.</p><p>Устройство танков является весьма специфичным. Танк с номером <span class="tex-span"><i>i</i></span> характеризуется одним целым числом <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span>, которое называется <span class="tex-font-style-it">радиусом приема сообщений</span> этого танка.</p><p>Передача сообщения между двумя танками занимает одну секунду, при этом не всегда один танк может передать сообщение другому. Рассмотрим два танка в колонне такие, что первый из них является <span class="tex-span"><i>i</i></span>-ым по счёту с начала колонны, а второй — <span class="tex-span"><i>j</i></span>-ым по счёту, причём второй танк имеет номер <span class="tex-span"><i>x</i></span>. Тогда первый танк может передать второму танку сообщение, если <span class="tex-span"><i>i</i> &lt; <i>j</i></span> и <span class="tex-span"><i>i</i> ≥ <i>j</i> - <i>a</i><sub class="lower-index"><i>x</i></sub></span>.</p><p>Перед министерством обороны (а вскоре и перед Умным Бобром) встал вопрос об эффективной организации учений — нужно провести упражнение за минимальное время. Временем перемещения танков в колонне будем пренебрегать, так как улучшение скоростных характеристик танков не является приоритетной задачей на этих учениях.</p><p>Вам дано количество танков, а также радиусы приёма сообщений всех танков. Вы должны помочь Умному Бобру и организовать передачу сообщений таким образом, чтобы суммарное время передачи всех сообщений было минимально возможным.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Первая строка содержит целое число <span class="tex-span"><i>n</i></span> — количество танков в колонне. Следующие <span class="tex-span"><i>n</i></span> строк содержат по одному целому числу <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>a</i><sub class="lower-index"><i>i</i></sub> ≤ 250000</span>, <span class="tex-span">1 ≤ <i>i</i> ≤ <i>n</i></span>) — радиусы приема сообщений танков в порядке от танка с номером <span class="tex-span">1</span> к танку с номером <span class="tex-span"><i>n</i></span> (напомним, что изначально танки расположены в колонне по порядку номеров).</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 300</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 10000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 250000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите одно целое число — минимально возможное суммарное время передачи сообщений.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-битных чисел на С++. Рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span> или спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3<br />2<br />1<br />1<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>5<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5<br />2<br />2<br />2<br />2<br />2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>10<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере изначальный порядок танков — <span class="tex-span">1, 2, 3</span>. Первый танк передает сообщение второму, затем второй передает третьему — это занимает две секунды. Третий танк переезжает вперед и порядок танков теперь <span class="tex-span">3, 1, 2</span>. Третий танк передает сообщение первому, затем первый передает второму — это занимает еще две секунды. Второй танк переезжает вперед и порядок танков теперь <span class="tex-span">2, 3, 1</span>. При таком расположении второй танк сразу может передать сообщение первому, поскольку радиус приема первого танка достаточен — это занимает одну секунду. Наконец, танки возвращаются в исходный порядок <span class="tex-span">1, 2, 3</span>. Всего упражнение занимает <span class="tex-span">5</span> секунд.</p><p>Во втором примере все пять танков одинаковы и передача одного сообщения занимает две секунды, поэтому всего упражнение занимает <span class="tex-span">10</span> секунд.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B2. Военные учения</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>3 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY начал сотрудничество с министерством обороны. Сейчас проводятся учения по передвижению танковых колонн. На этих учениях тестируется новый вид танков, имеющих возможность передавать информацию. Для тестирования нового вида танков на учениях проводится специальное упражнение, суть которого заключается в следующем.</p><p>Изначально колонна состоит из <span class="tex-span"><i>n</i></span> танков, последовательно пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> в порядке от начала колонны к ее концу. За все упражнение нужно передать ровно <span class="tex-span"><i>n</i></span> сообщений из начала колонны в её конец.</p><p>Передача одного сообщения происходит следующим образом. Первый в колонне танк передает сообщение одному из танков в колонне. Получивший сообщение танк передает его дальше по колонне. Так происходит, пока сообщение не получит последний танк. Возможно, что сообщение получат не все танки из колонны — важно, чтобы сообщение получил именно последний в колонне танк.</p><p>После получения сообщения последний танк (с номером <span class="tex-span"><i>n</i></span>) переезжает в начало колонны и аналогичным образом передаёт другое сообщение в конец колонны. Когда сообщение доходит до последнего танка (с номером <span class="tex-span"><i>n</i> - 1</span>), этот танк переезжает в начало и передаёт следующее сообщение в конец колонны, и так далее. Таким образом, упражнение завершается, когда колонна приобретает исходный вид, то есть сразу после перемещения танка номер <span class="tex-span">1</span> в начало колонны.</p><p>Если изначально танки в колонне располагались в порядке <span class="tex-span">1, 2, ..., <i>n</i></span>, то после первого переезда они будут располагаться в порядке <span class="tex-span"><i>n</i>, 1, ..., <i>n</i> - 1</span>, после второго переезда — в порядке <span class="tex-span"><i>n</i> - 1, <i>n</i>, 1, ..., <i>n</i> - 2</span>, и так далее.</p><p>Устройство танков является весьма специфичным. Танк с номером <span class="tex-span"><i>i</i></span> характеризуется одним целым числом <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span>, которое называется <span class="tex-font-style-it">радиусом приема сообщений</span> этого танка.</p><p>Передача сообщения между двумя танками занимает одну секунду, при этом не всегда один танк может передать сообщение другому. Рассмотрим два танка в колонне такие, что первый из них является <span class="tex-span"><i>i</i></span>-ым по счёту с начала колонны, а второй — <span class="tex-span"><i>j</i></span>-ым по счёту, причём второй танк имеет номер <span class="tex-span"><i>x</i></span>. Тогда первый танк может передать второму танку сообщение, если <span class="tex-span"><i>i</i> &lt; <i>j</i></span> и <span class="tex-span"><i>i</i> ≥ <i>j</i> - <i>a</i><sub class="lower-index"><i>x</i></sub></span>.</p><p>Перед министерством обороны (а вскоре и перед Умным Бобром) встал вопрос об эффективной организации учений — нужно провести упражнение за минимальное время. Временем перемещения танков в колонне будем пренебрегать, так как улучшение скоростных характеристик танков не является приоритетной задачей на этих учениях.</p><p>Вам дано количество танков, а также радиусы приёма сообщений всех танков. Вы должны помочь Умному Бобру и организовать передачу сообщений таким образом, чтобы суммарное время передачи всех сообщений было минимально возможным.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Первая строка содержит целое число <span class="tex-span"><i>n</i></span> — количество танков в колонне. Следующие <span class="tex-span"><i>n</i></span> строк содержат по одному целому числу <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>a</i><sub class="lower-index"><i>i</i></sub> ≤ 250000</span>, <span class="tex-span">1 ≤ <i>i</i> ≤ <i>n</i></span>) — радиусы приема сообщений танков в порядке от танка с номером <span class="tex-span">1</span> к танку с номером <span class="tex-span"><i>n</i></span> (напомним, что изначально танки расположены в колонне по порядку номеров).</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 300</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 10000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 250000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите одно целое число — минимально возможное суммарное время передачи сообщений.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-битных чисел на С++. Рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span> или спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3<br />2<br />1<br />1<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>5<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5<br />2<br />2<br />2<br />2<br />2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>10<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере изначальный порядок танков — <span class="tex-span">1, 2, 3</span>. Первый танк передает сообщение второму, затем второй передает третьему — это занимает две секунды. Третий танк переезжает вперед и порядок танков теперь <span class="tex-span">3, 1, 2</span>. Третий танк передает сообщение первому, затем первый передает второму — это занимает еще две секунды. Второй танк переезжает вперед и порядок танков теперь <span class="tex-span">2, 3, 1</span>. При таком расположении второй танк сразу может передать сообщение первому, поскольку радиус приема первого танка достаточен — это занимает одну секунду. Наконец, танки возвращаются в исходный порядок <span class="tex-span">1, 2, 3</span>. Всего упражнение занимает <span class="tex-span">5</span> секунд.</p><p>Во втором примере все пять танков одинаковы и передача одного сообщения занимает две секунды, поэтому всего упражнение занимает <span class="tex-span">10</span> секунд.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B3. Военные учения</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>3 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY начал сотрудничество с министерством обороны. Сейчас проводятся учения по передвижению танковых колонн. На этих учениях тестируется новый вид танков, имеющих возможность передавать информацию. Для тестирования нового вида танков на учениях проводится специальное упражнение, суть которого заключается в следующем.</p><p>Изначально колонна состоит из <span class="tex-span"><i>n</i></span> танков, последовательно пронумерованных от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> в порядке от начала колонны к ее концу. За все упражнение нужно передать ровно <span class="tex-span"><i>n</i></span> сообщений из начала колонны в её конец.</p><p>Передача одного сообщения происходит следующим образом. Первый в колонне танк передает сообщение одному из танков в колонне. Получивший сообщение танк передает его дальше по колонне. Так происходит, пока сообщение не получит последний танк. Возможно, что сообщение получат не все танки из колонны — важно, чтобы сообщение получил именно последний в колонне танк.</p><p>После получения сообщения последний танк (с номером <span class="tex-span"><i>n</i></span>) переезжает в начало колонны и аналогичным образом передаёт другое сообщение в конец колонны. Когда сообщение доходит до последнего танка (с номером <span class="tex-span"><i>n</i> - 1</span>), этот танк переезжает в начало и передаёт следующее сообщение в конец колонны, и так далее. Таким образом, упражнение завершается, когда колонна приобретает исходный вид, то есть сразу после перемещения танка номер <span class="tex-span">1</span> в начало колонны.</p><p>Если изначально танки в колонне располагались в порядке <span class="tex-span">1, 2, ..., <i>n</i></span>, то после первого переезда они будут располагаться в порядке <span class="tex-span"><i>n</i>, 1, ..., <i>n</i> - 1</span>, после второго переезда — в порядке <span class="tex-span"><i>n</i> - 1, <i>n</i>, 1, ..., <i>n</i> - 2</span>, и так далее.</p><p>Устройство танков является весьма специфичным. Танк с номером <span class="tex-span"><i>i</i></span> характеризуется одним целым числом <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span>, которое называется <span class="tex-font-style-it">радиусом приема сообщений</span> этого танка.</p><p>Передача сообщения между двумя танками занимает одну секунду, при этом не всегда один танк может передать сообщение другому. Рассмотрим два танка в колонне такие, что первый из них является <span class="tex-span"><i>i</i></span>-ым по счёту с начала колонны, а второй — <span class="tex-span"><i>j</i></span>-ым по счёту, причём второй танк имеет номер <span class="tex-span"><i>x</i></span>. Тогда первый танк может передать второму танку сообщение, если <span class="tex-span"><i>i</i> &lt; <i>j</i></span> и <span class="tex-span"><i>i</i> ≥ <i>j</i> - <i>a</i><sub class="lower-index"><i>x</i></sub></span>.</p><p>Перед министерством обороны (а вскоре и перед Умным Бобром) встал вопрос об эффективной организации учений — нужно провести упражнение за минимальное время. Временем перемещения танков в колонне будем пренебрегать, так как улучшение скоростных характеристик танков не является приоритетной задачей на этих учениях.</p><p>Вам дано количество танков, а также радиусы приёма сообщений всех танков. Вы должны помочь Умному Бобру и организовать передачу сообщений таким образом, чтобы суммарное время передачи всех сообщений было минимально возможным.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Первая строка содержит целое число <span class="tex-span"><i>n</i></span> — количество танков в колонне. Следующие <span class="tex-span"><i>n</i></span> строк содержат по одному целому числу <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>a</i><sub class="lower-index"><i>i</i></sub> ≤ 250000</span>, <span class="tex-span">1 ≤ <i>i</i> ≤ <i>n</i></span>) — радиусы приема сообщений танков в порядке от танка с номером <span class="tex-span">1</span> к танку с номером <span class="tex-span"><i>n</i></span> (напомним, что изначально танки расположены в колонне по порядку номеров).</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 300</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 10000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">2 ≤ <i>n</i> ≤ 250000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите одно целое число — минимально возможное суммарное время передачи сообщений.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-битных чисел на С++. Рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span> или спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3<br />2<br />1<br />1<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>5<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5<br />2<br />2<br />2<br />2<br />2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>10<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом примере изначальный порядок танков — <span class="tex-span">1, 2, 3</span>. Первый танк передает сообщение второму, затем второй передает третьему — это занимает две секунды. Третий танк переезжает вперед и порядок танков теперь <span class="tex-span">3, 1, 2</span>. Третий танк передает сообщение первому, затем первый передает второму — это занимает еще две секунды. Второй танк переезжает вперед и порядок танков теперь <span class="tex-span">2, 3, 1</span>. При таком расположении второй танк сразу может передать сообщение первому, поскольку радиус приема первого танка достаточен — это занимает одну секунду. Наконец, танки возвращаются в исходный порядок <span class="tex-span">1, 2, 3</span>. Всего упражнение занимает <span class="tex-span">5</span> секунд.</p><p>Во втором примере все пять танков одинаковы и передача одного сообщения занимает две секунды, поэтому всего упражнение занимает <span class="tex-span">10</span> секунд.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C1. Игра с двумя деревьями</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 секунда</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умному Бобру из ABBYY пришла идея новой развивающей игры для детей. Бобер считает, что такая игра поможет детям лучше понимать программирование.</p><p>Основной объект игры — конечные корневые деревья, на каждом ребре которых записана некоторая строчная буква латинского алфавита. Вершины в любом дереве всегда пронумерованы последовательно от <span class="tex-span">1</span> до <span class="tex-span"><i>m</i></span>, где <span class="tex-span"><i>m</i></span> — число вершин в этом дереве. Перед описанием самой игры введем несколько определений.</p><p>Последовательность вершин дерева с номерами <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> (<span class="tex-span"><i>k</i> ≥ 1</span>) будем называть <span class="tex-font-style-it">прямым путем</span>, если для любого целого <span class="tex-span"><i>i</i></span> от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i> - 1</span> вершина <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i></sub></span> является непосредственным предком вершины <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i> + 1</sub></span>. Если мы последовательно выпишем все буквы по ребрам данного пути от <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span> до <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>, то мы получим некоторую строку (при <span class="tex-span"><i>k</i> = 1</span> — пустую). Будем говорить, что такая строка соответствует прямому пути <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>.</p><p>Последовательность вершин дерева с номерами <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> (<span class="tex-span"><i>k</i> ≥ 1</span>) будем называть <span class="tex-font-style-it">обратным путем</span>, если для любого целого <span class="tex-span"><i>i</i></span> от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i> - 1</span> вершина <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i></sub></span> является непосредственным потомком вершины <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i> + 1</sub></span>. Если мы последовательно выпишем все буквы по ребрам данного пути от <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span> до <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>, то мы получим некоторую строку (при <span class="tex-span"><i>k</i> = 1</span> — пустую). Будем говорить, что такая строка соответствует обратному пути <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>.</p><p>Теперь опишем игру, которую придумал Умный Бобер из ABBYY. Для игры используются два корневых дерева, каждое из которых изначально состоит из одной вершины с номером <span class="tex-span">1</span>. Игроку дана некоторая последовательность операций. Каждая операция характеризуется тройкой (<span class="tex-span"><i>t</i></span>, <span class="tex-span"><i>v</i></span>, <span class="tex-span"><i>c</i></span>), где: <ul> <li> <span class="tex-span"><i>t</i></span> — номер дерева, с которым производится операция (<span class="tex-span">1</span> либо <span class="tex-span">2</span>); </li><li> <span class="tex-span"><i>v</i></span> — номер вершины в рассматриваемом дереве (гарантируется, что дерево содержит вершину с таким номером); </li><li> <span class="tex-span"><i>c</i></span> — некоторая строчная буква латинского алфавита. </li></ul></p><p>Сама операция заключается в следующем: у вершины <span class="tex-span"><i>v</i></span> дерева <span class="tex-span"><i>t</i></span> появляется новый потомок с номером <span class="tex-span"><i>m</i> + 1</span> (где <span class="tex-span"><i>m</i></span> — текущее число вершин в дереве <span class="tex-span"><i>t</i></span>), причем на ребре, которое входит в новую вершину, нужно записать букву <span class="tex-span"><i>c</i></span>.</p><p>Упорядоченную тройку целых чисел (<span class="tex-span"><i>i</i></span>, <span class="tex-span"><i>j</i></span>, <span class="tex-span"><i>q</i></span>) будем называть <span class="tex-font-style-it">хорошей комбинацией</span>, если: <ul> <li> <span class="tex-span">1 ≤ <i>i</i> ≤ <i>m</i><sub class="lower-index">1</sub></span>, где <span class="tex-span"><i>m</i><sub class="lower-index">1</sub></span> — количество вершин в первом дереве; </li><li> <span class="tex-span">1 ≤ <i>j</i>, <i>q</i> ≤ <i>m</i><sub class="lower-index">2</sub></span>, где <span class="tex-span"><i>m</i><sub class="lower-index">2</sub></span> — количество вершин во втором дереве; </li><li> во втором дереве существует прямой путь <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> такой, что <span class="tex-span"><i>v</i><sub class="lower-index">1</sub> = <i>j</i></span> и <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub> = <i>q</i></span>; </li><li> строка, соответствующая прямому пути во втором дереве от вершины <span class="tex-span"><i>j</i></span> до вершины <span class="tex-span"><i>q</i></span> равна строке, соответствующей обратному пути в первом дереве от вершины <span class="tex-span"><i>i</i></span> до вершины <span class="tex-span">1</span> (заметим, что оба пути единственны). </li></ul></p><p>Ваша задача заключается в том, чтобы вычислить количество существующих хороших комбинаций после каждой операции над деревьями.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> — количество операций над деревьями. Следующие <span class="tex-span"><i>n</i></span> строк содержат описания операций в порядке их выполнения. Каждая строка имеет вид «<span class="tex-span"><i>t</i></span> <span class="tex-span"><i>v</i></span> <span class="tex-span"><i>c</i></span>», где <span class="tex-span"><i>t</i></span> — номер дерева, <span class="tex-span"><i>v</i></span> — номер вершины в дереве, <span class="tex-span"><i>c</i></span> — строчная буква латинского алфавита.</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 700</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 7000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 100000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите ровно <span class="tex-span"><i>n</i></span> строк по одному целому числу в каждой — количество существующих хороших комбинаций после соответствующей операции из ввода.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-битных чисел на С++. Рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span> или спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>5<br />1 1 a<br />2 1 a<br />1 2 b<br />2 1 b<br />2 3 a<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br />3<br />3<br />4<br />7<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>После первой операции единственная хорошая комбинация — <span class="tex-span">(1, 1, 1)</span>. После второй операции появились новые хорошие комбинации <span class="tex-span">(2, 1, 2)</span> и <span class="tex-span">(1, 2, 2)</span>. Третья операция не принесла никаких хороших комбинаций. После четвёртой операции появилась хорошая комбинация <span class="tex-span">(1, 3, 3)</span>. Наконец, после пятой операции появилось сразу три новых хороших комбинации — <span class="tex-span">(1, 4, 4)</span>, <span class="tex-span">(2, 3, 4)</span> и <span class="tex-span">(3, 1, 4)</span>.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C2. Игра с двумя деревьями</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 секунда</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умному Бобру из ABBYY пришла идея новой развивающей игры для детей. Бобер считает, что такая игра поможет детям лучше понимать программирование.</p><p>Основной объект игры — конечные корневые деревья, на каждом ребре которых записана некоторая строчная буква латинского алфавита. Вершины в любом дереве всегда пронумерованы последовательно от <span class="tex-span">1</span> до <span class="tex-span"><i>m</i></span>, где <span class="tex-span"><i>m</i></span> — число вершин в этом дереве. Перед описанием самой игры введем несколько определений.</p><p>Последовательность вершин дерева с номерами <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> (<span class="tex-span"><i>k</i> ≥ 1</span>) будем называть <span class="tex-font-style-it">прямым путем</span>, если для любого целого <span class="tex-span"><i>i</i></span> от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i> - 1</span> вершина <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i></sub></span> является непосредственным предком вершины <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i> + 1</sub></span>. Если мы последовательно выпишем все буквы по ребрам данного пути от <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span> до <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>, то мы получим некоторую строку (при <span class="tex-span"><i>k</i> = 1</span> — пустую). Будем говорить, что такая строка соответствует прямому пути <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>.</p><p>Последовательность вершин дерева с номерами <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> (<span class="tex-span"><i>k</i> ≥ 1</span>) будем называть <span class="tex-font-style-it">обратным путем</span>, если для любого целого <span class="tex-span"><i>i</i></span> от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i> - 1</span> вершина <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i></sub></span> является непосредственным потомком вершины <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i> + 1</sub></span>. Если мы последовательно выпишем все буквы по ребрам данного пути от <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span> до <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>, то мы получим некоторую строку (при <span class="tex-span"><i>k</i> = 1</span> — пустую). Будем говорить, что такая строка соответствует обратному пути <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>.</p><p>Теперь опишем игру, которую придумал Умный Бобер из ABBYY. Для игры используются два корневых дерева, каждое из которых изначально состоит из одной вершины с номером <span class="tex-span">1</span>. Игроку дана некоторая последовательность операций. Каждая операция характеризуется тройкой (<span class="tex-span"><i>t</i></span>, <span class="tex-span"><i>v</i></span>, <span class="tex-span"><i>c</i></span>), где: <ul> <li> <span class="tex-span"><i>t</i></span> — номер дерева, с которым производится операция (<span class="tex-span">1</span> либо <span class="tex-span">2</span>); </li><li> <span class="tex-span"><i>v</i></span> — номер вершины в рассматриваемом дереве (гарантируется, что дерево содержит вершину с таким номером); </li><li> <span class="tex-span"><i>c</i></span> — некоторая строчная буква латинского алфавита. </li></ul></p><p>Сама операция заключается в следующем: у вершины <span class="tex-span"><i>v</i></span> дерева <span class="tex-span"><i>t</i></span> появляется новый потомок с номером <span class="tex-span"><i>m</i> + 1</span> (где <span class="tex-span"><i>m</i></span> — текущее число вершин в дереве <span class="tex-span"><i>t</i></span>), причем на ребре, которое входит в новую вершину, нужно записать букву <span class="tex-span"><i>c</i></span>.</p><p>Упорядоченную тройку целых чисел (<span class="tex-span"><i>i</i></span>, <span class="tex-span"><i>j</i></span>, <span class="tex-span"><i>q</i></span>) будем называть <span class="tex-font-style-it">хорошей комбинацией</span>, если: <ul> <li> <span class="tex-span">1 ≤ <i>i</i> ≤ <i>m</i><sub class="lower-index">1</sub></span>, где <span class="tex-span"><i>m</i><sub class="lower-index">1</sub></span> — количество вершин в первом дереве; </li><li> <span class="tex-span">1 ≤ <i>j</i>, <i>q</i> ≤ <i>m</i><sub class="lower-index">2</sub></span>, где <span class="tex-span"><i>m</i><sub class="lower-index">2</sub></span> — количество вершин во втором дереве; </li><li> во втором дереве существует прямой путь <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> такой, что <span class="tex-span"><i>v</i><sub class="lower-index">1</sub> = <i>j</i></span> и <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub> = <i>q</i></span>; </li><li> строка, соответствующая прямому пути во втором дереве от вершины <span class="tex-span"><i>j</i></span> до вершины <span class="tex-span"><i>q</i></span> равна строке, соответствующей обратному пути в первом дереве от вершины <span class="tex-span"><i>i</i></span> до вершины <span class="tex-span">1</span> (заметим, что оба пути единственны). </li></ul></p><p>Ваша задача заключается в том, чтобы вычислить количество существующих хороших комбинаций после каждой операции над деревьями.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> — количество операций над деревьями. Следующие <span class="tex-span"><i>n</i></span> строк содержат описания операций в порядке их выполнения. Каждая строка имеет вид «<span class="tex-span"><i>t</i></span> <span class="tex-span"><i>v</i></span> <span class="tex-span"><i>c</i></span>», где <span class="tex-span"><i>t</i></span> — номер дерева, <span class="tex-span"><i>v</i></span> — номер вершины в дереве, <span class="tex-span"><i>c</i></span> — строчная буква латинского алфавита.</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 700</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 7000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 100000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите ровно <span class="tex-span"><i>n</i></span> строк по одному целому числу в каждой — количество существующих хороших комбинаций после соответствующей операции из ввода.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-битных чисел на С++. Рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span> или спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>5<br />1 1 a<br />2 1 a<br />1 2 b<br />2 1 b<br />2 3 a<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br />3<br />3<br />4<br />7<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>После первой операции единственная хорошая комбинация — <span class="tex-span">(1, 1, 1)</span>. После второй операции появились новые хорошие комбинации <span class="tex-span">(2, 1, 2)</span> и <span class="tex-span">(1, 2, 2)</span>. Третья операция не принесла никаких хороших комбинаций. После четвёртой операции появилась хорошая комбинация <span class="tex-span">(1, 3, 3)</span>. Наконец, после пятой операции появилось сразу три новых хороших комбинации — <span class="tex-span">(1, 4, 4)</span>, <span class="tex-span">(2, 3, 4)</span> и <span class="tex-span">(3, 1, 4)</span>.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C3. Игра с двумя деревьями</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 секунда</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умному Бобру из ABBYY пришла идея новой развивающей игры для детей. Бобер считает, что такая игра поможет детям лучше понимать программирование.</p><p>Основной объект игры — конечные корневые деревья, на каждом ребре которых записана некоторая строчная буква латинского алфавита. Вершины в любом дереве всегда пронумерованы последовательно от <span class="tex-span">1</span> до <span class="tex-span"><i>m</i></span>, где <span class="tex-span"><i>m</i></span> — число вершин в этом дереве. Перед описанием самой игры введем несколько определений.</p><p>Последовательность вершин дерева с номерами <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> (<span class="tex-span"><i>k</i> ≥ 1</span>) будем называть <span class="tex-font-style-it">прямым путем</span>, если для любого целого <span class="tex-span"><i>i</i></span> от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i> - 1</span> вершина <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i></sub></span> является непосредственным предком вершины <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i> + 1</sub></span>. Если мы последовательно выпишем все буквы по ребрам данного пути от <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span> до <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>, то мы получим некоторую строку (при <span class="tex-span"><i>k</i> = 1</span> — пустую). Будем говорить, что такая строка соответствует прямому пути <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>.</p><p>Последовательность вершин дерева с номерами <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> (<span class="tex-span"><i>k</i> ≥ 1</span>) будем называть <span class="tex-font-style-it">обратным путем</span>, если для любого целого <span class="tex-span"><i>i</i></span> от <span class="tex-span">1</span> до <span class="tex-span"><i>k</i> - 1</span> вершина <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i></sub></span> является непосредственным потомком вершины <span class="tex-span"><i>v</i><sub class="lower-index"><i>i</i> + 1</sub></span>. Если мы последовательно выпишем все буквы по ребрам данного пути от <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span> до <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>, то мы получим некоторую строку (при <span class="tex-span"><i>k</i> = 1</span> — пустую). Будем говорить, что такая строка соответствует обратному пути <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span>.</p><p>Теперь опишем игру, которую придумал Умный Бобер из ABBYY. Для игры используются два корневых дерева, каждое из которых изначально состоит из одной вершины с номером <span class="tex-span">1</span>. Игроку дана некоторая последовательность операций. Каждая операция характеризуется тройкой (<span class="tex-span"><i>t</i></span>, <span class="tex-span"><i>v</i></span>, <span class="tex-span"><i>c</i></span>), где: <ul> <li> <span class="tex-span"><i>t</i></span> — номер дерева, с которым производится операция (<span class="tex-span">1</span> либо <span class="tex-span">2</span>); </li><li> <span class="tex-span"><i>v</i></span> — номер вершины в рассматриваемом дереве (гарантируется, что дерево содержит вершину с таким номером); </li><li> <span class="tex-span"><i>c</i></span> — некоторая строчная буква латинского алфавита. </li></ul></p><p>Сама операция заключается в следующем: у вершины <span class="tex-span"><i>v</i></span> дерева <span class="tex-span"><i>t</i></span> появляется новый потомок с номером <span class="tex-span"><i>m</i> + 1</span> (где <span class="tex-span"><i>m</i></span> — текущее число вершин в дереве <span class="tex-span"><i>t</i></span>), причем на ребре, которое входит в новую вершину, нужно записать букву <span class="tex-span"><i>c</i></span>.</p><p>Упорядоченную тройку целых чисел (<span class="tex-span"><i>i</i></span>, <span class="tex-span"><i>j</i></span>, <span class="tex-span"><i>q</i></span>) будем называть <span class="tex-font-style-it">хорошей комбинацией</span>, если: <ul> <li> <span class="tex-span">1 ≤ <i>i</i> ≤ <i>m</i><sub class="lower-index">1</sub></span>, где <span class="tex-span"><i>m</i><sub class="lower-index">1</sub></span> — количество вершин в первом дереве; </li><li> <span class="tex-span">1 ≤ <i>j</i>, <i>q</i> ≤ <i>m</i><sub class="lower-index">2</sub></span>, где <span class="tex-span"><i>m</i><sub class="lower-index">2</sub></span> — количество вершин во втором дереве; </li><li> во втором дереве существует прямой путь <span class="tex-span"><i>v</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>v</i><sub class="lower-index">2</sub></span>, <span class="tex-span">...</span>, <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub></span> такой, что <span class="tex-span"><i>v</i><sub class="lower-index">1</sub> = <i>j</i></span> и <span class="tex-span"><i>v</i><sub class="lower-index"><i>k</i></sub> = <i>q</i></span>; </li><li> строка, соответствующая прямому пути во втором дереве от вершины <span class="tex-span"><i>j</i></span> до вершины <span class="tex-span"><i>q</i></span> равна строке, соответствующей обратному пути в первом дереве от вершины <span class="tex-span"><i>i</i></span> до вершины <span class="tex-span">1</span> (заметим, что оба пути единственны). </li></ul></p><p>Ваша задача заключается в том, чтобы вычислить количество существующих хороших комбинаций после каждой операции над деревьями.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> — количество операций над деревьями. Следующие <span class="tex-span"><i>n</i></span> строк содержат описания операций в порядке их выполнения. Каждая строка имеет вид «<span class="tex-span"><i>t</i></span> <span class="tex-span"><i>v</i></span> <span class="tex-span"><i>c</i></span>», где <span class="tex-span"><i>t</i></span> — номер дерева, <span class="tex-span"><i>v</i></span> — номер вершины в дереве, <span class="tex-span"><i>c</i></span> — строчная буква латинского алфавита.</p><p>Для получения полного балла за первую группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 700</span>.</p><p>Для получения полного балла за вторую группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 7000</span>.</p><p>Для получения полного балла за третью группу тестов достаточно решить задачу при <span class="tex-span">1 ≤ <i>n</i> ≤ 100000</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите ровно <span class="tex-span"><i>n</i></span> строк по одному целому числу в каждой — количество существующих хороших комбинаций после соответствующей операции из ввода.</p><p>Пожалуйста, не используйте спецификатор <span class="tex-font-style-tt">%lld</span> для чтения или записи 64-битных чисел на С++. Рекомендуется использовать потоки <span class="tex-font-style-tt">cin</span>, <span class="tex-font-style-tt">cout</span> или спецификатор <span class="tex-font-style-tt">%I64d</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>5<br />1 1 a<br />2 1 a<br />1 2 b<br />2 1 b<br />2 3 a<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br />3<br />3<br />4<br />7<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>После первой операции единственная хорошая комбинация — <span class="tex-span">(1, 1, 1)</span>. После второй операции появились новые хорошие комбинации <span class="tex-span">(2, 1, 2)</span> и <span class="tex-span">(1, 2, 2)</span>. Третья операция не принесла никаких хороших комбинаций. После четвёртой операции появилась хорошая комбинация <span class="tex-span">(1, 3, 3)</span>. Наконец, после пятой операции появилось сразу три новых хороших комбинации — <span class="tex-span">(1, 4, 4)</span>, <span class="tex-span">(2, 3, 4)</span> и <span class="tex-span">(3, 1, 4)</span>.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D1. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D2. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D3. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D4. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D5. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D6. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D7. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D8. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D9. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 2em;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D10. Задача от Бобра 3</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Умный Бобер из ABBYY в очередной раз порадовал участников ABBYY Cup'а своей задачей! В этот раз Бобер предлагает участникам соревнований попробовать себя в задаче классификации документов по темам. Итак, опишем суть задачи:</p><p>Вам дается некоторая обучающая выборка документов. Для каждого из этих документов известна его тема. В данной задаче тема — это некоторое целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span>. Каждое из этих чисел имеет физический смысл. Например, тексты темы <span class="tex-span">3</span> посвящены торговле.</p><p>Скачать обучающую выборку текстов можно по следующей ссылке: <span class="tex-font-style-tt">http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip</span>. Внутри находятся три каталога с именами «1», «2», «3». Каталог с именем «1» содержит документы <span class="tex-span">1</span>-ой темы, каталог «2» содержит документы <span class="tex-span">2</span>-ой темы, а каталог «3» содержит документы <span class="tex-span">3</span>-ей темы. Каждый документ соответствует ровно одному файлу из некоторого каталога.</p><p>Все документы имеют следующий формат: первая строка содержит идентификатор документа, вторая строка содержит название документа, все последующие строки содержат текст документа. Идентификатор документа используется для удобства установки задачи и не несет никакой полезной информации для участников.</p><p>Вам нужно написать программу, которая должна указывать тему для некоторого произвольного документа. Гарантируется, что все предоставленные для программы документы соответствуют одной из трех тем обучающей выборки.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>id</i></span> (<span class="tex-span">0 ≤ <i>id</i> ≤ 10<sup class="upper-index">6</sup></span>) — идентификатор документа. Во второй строке содержится название документа. В третьей и последующих строках содержится текст документа. Гарантируется, что размер любого исходного документа не превысит <span class="tex-span">10</span> килобайт.</p><p>Тесты для этой задачи разбиты на <span class="tex-span">10</span> групп. Документы групп <span class="tex-span">1</span> и <span class="tex-span">2</span> взяты из обучающей выборки, однако их идентификаторы не будут совпадать с идентификаторами, указанными в обучающей выборке. Группы с <span class="tex-span">3</span>-ей по <span class="tex-span">10</span>-ую, по мнению авторов, примерно отсортированы в порядке возрастания сложности (документы этих групп отсутствуют в обучающей выборке).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите целое число от <span class="tex-span">1</span> до <span class="tex-span">3</span> включительно — номер темы, которой соответствует данный документ.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>

    <br style="clear:both;"/>

    <div id="footer">
        <div><a href="http://codeforces.ru/">Codeforces</a> (c) Copyright 2010-2013 Михаил Мирзаянов</div>
        <div>Соревнования по программированию 2.0</div>

    </div>
</div>
</div>
</body>
</html>                                       
