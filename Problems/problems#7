
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="X-Csrf-Token" content="1dd9f7b5efged7143a6b0e0h8cb37aaa"/>
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="-1">
    <meta name="google-site-verification" content="OTd2dN5x4nS4OPknPI9JFg36fKxjqY0i1PSfFPv_J90"/>
    <meta property="fb:admins" content="100001352546622" />
    <meta property="og:image" content="http://worker.codeforces.ru/static/images/codeforces-vk-square-ru.png"/>
    <meta property="og:title" content="Задачи - Codeforces"/>
    <meta property="og:site_name" content="Codeforces"/>
    
    <meta name="cc" content="f8yfa25jzxja"/>
    
    <meta name="verify-reformal" content="f56f99fd7e087fb6ccb48ef2" />
    <title>Задачи - Codeforces</title>
        <meta name="description" content="Codeforces. Соревнования и олимпиады по информатике и программированию, сообщество программистов" />
        <meta name="keywords" content="программирование информатика контест олимпиада алгоритмы c++ java графы vkcup" />
    <meta name="robots" content="index, follow" />

    <link href="http://worker.codeforces.ru/static/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Cuprum&subset=latin,cyrillic' rel='stylesheet' type='text/css'>

    <HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<!--CombineResourcesFilter-->
    
<LINK href="http://worker.codeforces.ru/static/favicon.png" rel="shortcut icon" type="image/png">
    
<LINK href="http://worker.codeforces.ru/static/css/prettify.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/clear.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/style.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/ttypography.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/problem-statement.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/second-level-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/roundbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/datatable.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/topic.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/table-form.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.jgrowl.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/facebox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.wysiwyg.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.autocomplete.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/codeforces.datepick.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/colorbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.drafts.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/skins/markitup/style.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/sets/markdown/style.css" rel="stylesheet" type="text/css">

    
<SCRIPT charset="utf-8" src="//yandex.st/share/share.js" type="text/javascript"></SCRIPT>
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/sidebar-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/community.css" rel="stylesheet" type="text/css">

    <!--[if IE]>
        <style>
            #sidebar {
                padding-left: 1em;
                margin: 1em 1em 1em 0;
            }
        </style>
    <![endif]-->
    
    
<SCRIPT src="http://worker.codeforces.ru/static/js/prettify/prettify.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery-1.8.3.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/sockjs-0.2.1.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/vertxbus-1.2.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.easing.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.lavalamp.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.jgrowl.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/facebox.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.wysiwyg.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.colorpicker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.table.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.image.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.link.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.autocomplete.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.datepick.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ie6blocker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.colorbox-min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ba-bbq.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.drafts.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/codeforces.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/jquery.markitup.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/sets/markdown/set.js" type="text/javascript"></SCRIPT>
    <!--/CombineResourcesFilter-->
</HEAD>
</HTML>

        <script type="text/javascript" src="http://worker.codeforces.ru/static/js/jquery.datepick-ru.js"></script>
        <script src="http://vk.com/js/api/openapi.js" type="text/javascript"></script>
</head>
<body><span style='display:none;' class='csrf-token' data-csrf='1dd9f7b5efged7143a6b0e0h8cb37aaa'>&nbsp;</span>
<!-- Codeforces javascripts. -->
<script type="text/javascript">
    VK.init({apiId: 1961905});
</script>

<script type="text/javascript">
    if (window.parent.frames.length > 0) {
        window.stop();
    }
</script>

    <script type="text/javascript">
        $(document).ready(function() {
    $.ajaxPrefilter(function(options, originalOptions, xhr) {
        var csrf = Codeforces.getCsrfToken();

        if (csrf) {
            var data = originalOptions.data;
            if (originalOptions.data !== undefined) {
                if (Object.prototype.toString.call(originalOptions.data) === '[object String]') {
                    data = $.deparam(originalOptions.data);
                }
            } else {
                data = {};
            }
            options.data = $.param($.extend(data, { csrf_token: csrf }));
        }
    });

    window.updateTypography = function () {
        $("div.ttypography code").addClass("tt");
        $("div.ttypography pre>code").addClass("prettyprint").removeClass("tt");
        $("div.ttypography table").addClass("bordertable");
        prettyPrint();
    }

    $.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/x-www-form-urlencoded; charset=UTF-8", headers: {
        'X-Csrf-Token': Codeforces.getCsrfToken()
    }});

    window.updateTypography();

    Codeforces.signForms();

    $(".second-level-menu-list").lavaLamp({
        fx: "backout",
        speed: 1000
    });


    Codeforces.countdown();
    $("a[rel='photobox']").colorbox();


        });
    </script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-743380-5']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<div id="body">
<div style="width: 950px; margin: 0 auto;">
    <div id="header" style="position:relative;">
        <div style="float:left;">
                <a href="/"><img src="http://worker.codeforces.ru/static/images/codeforces-logo-with-upper-beta.png"/></a>
                        <div style="position:absolute;left:97px;top:40px;">
                            <a href="http://vk.com" class="logo-href">При поддержке <img
                                    style="position:relative;top:5px;" src="http://worker.codeforces.ru/static/images/vkontakte-tiny-ru.png"/></a>
                        </div>
        </div>
        <div class="lang">
            <div style="text-align: right;">
                <a href="?locale=en"><img src="http://worker.codeforces.ru/static/images/flags/24/gb.png" title="In English" alt="In English"/></a>
                <a href="?locale=ru"><img src="http://worker.codeforces.ru/static/images/flags/24/ru.png" title="По-русски" alt="По-русски"/></a>
            </div>
        </div>
        <br style="clear: both;"/>
    </div>

    <div style="text-align: center;font-size: 18px;margin-bottom: 0.5em;"
         class="caption">Codeforces Beta Round #7</div>
    <div style="border-top: 1px solid #ccc; height: 1em;"></div>

        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A. Калевич и шахматы</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Известный в Берляндии художник Калевич любит эпатировать общественность. Его последняя идея фикс — шахматы. Вот уже более тысячи лет люди играют в эту древнюю игру на неинтересных, однообразных досках. Калевич решил разрушить эту традицию, представив новый взгляд на шахматные доски.</p><p>Как и прежде, шахматная доска это квадратное поле <span class="tex-span">8 × 8</span> клеток, каждая из которых покрашена в черный или белый цвет. Калевич предлагает красить шахматные доски, выбирая на поле горизонтальный или вертикальный ряд из 8-ми клеток (т.е. строку или столбец) и закрашивая его в черный цвет. Изначально вся доска белая, а такие покраски можно делать один или более раз. Многократная покраска клетки допустима, но после первой покраски цвет клетки не меняется и остается черным. Калевич красит доски очень аккуратно и по любой отдельно взятой клетке невозможно понять, была она покрашена вертикальным или горизонтальным мазком.</p><p>Калевич надеется, что такие доски станут популярны, и ему будут поступать заказы на покраску досок, обеспечив его безбедную старость. Клиенты будут предоставлять ему информацию о том, какую доску они хотят иметь, а художник будет красить белую доску, реализуя идею клиента.</p><p>Конечно, в таком бизнесе надо экономить на всем — для каждого заказа Калевич хочет знать наименьшее количество мазков, которое ему надо совершить, чтобы выполнить требование клиента. Помогите Калевичу с этой несложной задачей.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Входные данные состоят ровно из 8-ми строк, каждая из которых содержит по 8 символов. Заданная матрица обозначает требование клиента, символ <span class="tex-font-style-tt">W</span> обозначает, что соответствующая клетка доски должна остаться белой, а <span class="tex-font-style-tt">B</span> — что клетка должна быть покрашена в черный цвет.</p><p>Гарантируется, что требование клиента может быть выполнено с помощью последовательных покрасок строк или столбцов доски в черный цвет.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите единственное число — минимальное количество строк или столбцов, которые надо покрасить Калевичу, чтобы белая доска совпала с требованиями.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>WWWBWWBW<br />BBBBBBBB<br />WWWBWWBW<br />WWWBWWBW<br />WWWBWWBW<br />WWWBWWBW<br />WWWBWWBW<br />WWWBWWBW<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>WWWWWWWW<br />BBBBBBBB<br />WWWWWWWW<br />WWWWWWWW<br />WWWWWWWW<br />WWWWWWWW<br />WWWWWWWW<br />WWWWWWWW<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B. Менеджер памяти</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 second</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>До релиза первой национальной операционной системы BerlOS осталось совсем чуть-чуть. В ней не готовы всего несколько компонентов — менеджер памяти в том числе. По задумке разработчиков, в первой версии он будет очень прост и прямолинеен. Менеджер памяти будет поддерживать три операции: <ul> <li> <span class="tex-font-style-tt">alloc n</span> — выделить <span class="tex-span"><i>n</i></span> байт памяти и вернуть идентификатор выделенного блока <span class="tex-span"><i>x</i></span>; </li><li> <span class="tex-font-style-tt">erase x</span> — удалить блок с идентификатором <span class="tex-span"><i>x</i></span>; </li><li> <span class="tex-font-style-tt">defragment</span> — дефрагментировать свободную память, переместив все блоки максимально к началу памяти, сохранив их относительный порядок. </li></ul></p><p>Модель памяти в данном случае очень проста. Память представляет собой последовательность <span class="tex-span"><i>m</i></span> байт, условно пронумерованных от первого до <span class="tex-span"><i>m</i></span>-го.</p><p>Первая операция <span class="tex-font-style-tt">alloc n</span> принимает в качестве единственного параметра размер блока памяти, который предстоит выделить. При обработке этой операции в памяти выбирается свободный блок из <span class="tex-span"><i>n</i></span> байт, идущих подряд. Если таких блоков несколько, то выбирается ближайший к началу памяти (первому байту). Все эти байты помечаются использованными, и менеджер возвращает 32-битное целое знаковое число, являющееся идентификатором этого блока. Если свободный блок такого размера найти невозможно, то функция возвращает специальное значение <span class="tex-font-style-tt">NULL</span>.</p><p>Вторая операция <span class="tex-font-style-tt">erase x</span> принимает в качестве параметра идентификатор некоторого блока. Она возвращает память системе, помечая байты этого блока свободными для последующего использования. В том случае, если этому идентификатору не соответствует ранее выделенный блок, который еще не был удален, то функция возвращает специальное значение <span class="tex-font-style-tt">ILLEGAL_ERASE_ARGUMENT</span>.</p><p>Последняя операция <span class="tex-font-style-tt">defragment</span> не имеет аргументов и просто перемещает занятые участки памяти вплотную к ее началу, не меняя их относительный порядок. Таким образом, после этой операции вся свободная память образует один непрерывный участок, который идет следом за использованной памятью.</p><p>В текущей реализации требуется использовать в качестве идентификаторов последовательные целые числа от 1. Каждый успешный вызов <span class="tex-font-style-tt">alloc</span> должен возвращать очередное число. Неудачные вызовы <span class="tex-font-style-tt">alloc</span> не оказывают влияния на описанную нумерацию.</p><p>Ваша задача состоит в том, чтобы написать реализацию менеджера памяти. Для каждой команды <span class="tex-font-style-tt">alloc</span> нужно выводить возвращаемое значение. Также следует выводить <span class="tex-font-style-tt">ILLEGAL_ERASE_ARGUMENT</span> для всех неудачных вызовов <span class="tex-font-style-tt">erase</span>.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке входных данных содержатся два целых положительных числа <span class="tex-span"><i>t</i></span> и <span class="tex-span"><i>m</i></span> (<span class="tex-span">1 ≤ <i>t</i> ≤ 100;1 ≤ <i>m</i> ≤ 100</span>), где <span class="tex-span"><i>t</i></span> — количество операций, заданных менеджеру памяти на исполнение, а <span class="tex-span"><i>m</i></span> — размер доступной памяти в байтах. Далее в <span class="tex-span"><i>t</i></span> строках заданы сами операции. Первая операция задается строкой <span class="tex-font-style-tt">alloc n</span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 100</span>), где <span class="tex-span"><i>n</i></span> целое число. Вторая задается строкой <span class="tex-font-style-tt">erase x</span>, где <span class="tex-span"><i>x</i></span> произвольное 32-битное целое знаковое число. Третья операция задается строкой <span class="tex-font-style-tt">defragment</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите последовательность строк. Каждая строка должна содержать либо результат работы операции <span class="tex-font-style-tt">alloc</span>, либо <span class="tex-font-style-tt">ILLEGAL_ERASE_ARGUMENT</span> как результат неудачного выполнения операции <span class="tex-font-style-tt">erase</span>. Вывод следует осуществлять в порядке совершения операций. Реализация <span class="tex-font-style-tt">alloc</span> должна возвращать в качестве идентификаторов выделенных блоков целые числа, начиная с 1.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>6 10<br />alloc 5<br />alloc 3<br />erase 1<br />alloc 6<br />defragment<br />alloc 6<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br />2<br />NULL<br />3<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C. Прямая</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 second</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Своим уравнением <span class="tex-span"><i>Ax</i> + <i>By</i> + <i>C</i> = 0</span> задана прямая на плоскости. Требуется найти любую принадлежащую этой прямой точку, координаты которой — целые числа от <span class="tex-span"> - 5·10<sup class="upper-index">18</sup></span> до <span class="tex-span">5·10<sup class="upper-index">18</sup></span> включительно, или выяснить что таких точек нет.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержатся три целых числа <span class="tex-span"><i>A</i></span>, <span class="tex-span"><i>B</i></span> и <span class="tex-span"><i>C</i></span> (<span class="tex-span"> - 2·10<sup class="upper-index">9</sup> ≤ <i>A</i>, <i>B</i>, <i>C</i> ≤ 2·10<sup class="upper-index">9</sup></span>) — соответствующие коэффициенты уравнения прямой. Гарантируется, что <span class="tex-span"><i>A</i><sup class="upper-index">2</sup> + <i>B</i><sup class="upper-index">2</sup> &gt; 0</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Если искомая точка существует, выведите ее координаты, иначе выведите единственное число <span class="tex-font-style-tt">-1</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2 5 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>6 -3<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D. Палиндромность</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 second</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Строка <span class="tex-span"><i>s</i></span> длины <span class="tex-span"><i>n</i></span> называется <span class="tex-span"><i>k</i></span>-палиндромом, если она сама является палиндромом, а ее префикс и суффикс длины <img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/baaa1cf00a178570d9b63b0518b73899b9a96307.png" /> являются <span class="tex-span">(<i>k</i> - 1)</span>-палиндромами. 0-палиндромом является любая строка (даже пустая).</p><p>Назовем палиндромностью строки <span class="tex-span"><i>s</i></span> такое максимальное число <span class="tex-span"><i>k</i></span>, для которого <span class="tex-span"><i>s</i></span> является <span class="tex-span"><i>k</i></span>-палиндромом. Например, палиндромность строки «<span class="tex-font-style-tt">abaaba</span>» равна 3.</p><p>Дана строка. Ваша задача — найти сумму палиндромностей всех ее префиксов.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке входных данных записана непустая строка, состоящая из букв латинского алфавита и цифр. Длина строки не превосходит <span class="tex-span">5·10<sup class="upper-index">6</sup></span>. Регистр букв следует различать.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите единственное число — сумму палиндромностей всех префиксов данной строки.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>a2A<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1</pre></div><div class="input"><div class="title">Входные данные</div><pre>abacaba<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>6</pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 2em;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">E. Проверка макросов</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>3 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Большинство программистов на C/C++ знают об отличных возможностях, предоставляемых директивами препроцессора #define, но также многим известны и проблемы, возникающие при их неаккуратном использовании.</p><p>В данной задаче мы рассматриваем следующую модель конструкций #define (также называемых макросами). Каждый макрос имеет свои имя и значение. Объявляется он следующим образом:</p><p><span class="tex-font-style-bf">#define</span> <span class="tex-font-style-it">имя_макроса</span> <span class="tex-font-style-it">значение_макроса</span></p><p>После этого объявления везде, где в программе встречается слово &quot;имя_макроса&quot; (как отдельный токен, т.е. как подстрока, окружённая неалфавитными символами), оно заменяется на &quot;значение_макроса&quot;. В &quot;значение_макроса&quot; в рамках нашей модели может быть записано только какое-либо арифметическое выражение, содержащее переменные, четыре арифметических операции, скобки, а также имя ранее объявленных макросов (в этом случае замена производится по цепочке). Процесс замены макросов на их значения называется подстановкой.</p><p>Одна из основных проблем, возникающих при использовании макросов — когда после выполнения подстановки получается арифметическое выражение, в котором из-за разных приоритетов операций может неожиданно измениться порядок вычисления.</p><p>Рассмотрим это на следующем примере. Определим такую конструкцию #define:</p><p>#define sum x + y</p><p>и пусть далее в программе считается выражение &quot;2 * sum&quot;. После подстановки макроса получится выражение &quot;2 * x + y&quot;, вместо интуитивно ожидаемого &quot;2 * (x + y)&quot;.</p><p>Определим &quot;подозрительной&quot; ситуацию, когда после выполнения подстановки макроса порядок вычислений меняется, выходя за пределы какого-либо макроса. Соответственно, Ваша задача — по набору определений #define и заданному выражению определить, является это выражение подозрительным или нет.</p><p>Определим это более формально. Выполним обычную подстановку макросов в заданном выражении. Кроме того, выполним &quot;безопасную&quot; подстановку макросов в выражение: окружив значение каждого макроса скобками; после этого, пользуясь арифметическими правилами раскрытия скобок, можно опустить некоторые скобки. Если при этом можно получить выражение, полностью совпадающее с результатом обычной подстановки (посимвольно, но игнорируя пробелы), то это выражение и система макросов считаются корректными, иначе — подозрительными.</p><p>Примечание. В этом критерии операция деления рассматривается с математической точки зрения, а не в смысле языка C++ (в котором под ним подразумевается деление нацело). Например, в выражении &quot;a*(b/c)&quot; мы можем опустить скобки и получить выражение &quot;a*b/c&quot;.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записано единственное число <span class="tex-span"><i>n</i></span> (<span class="tex-span">0 ≤ <i>n</i> ≤ 100</span>) — число конструкций #define в рассматриваемой программе.</p><p>Далее идут <span class="tex-span"><i>n</i></span> строк, в каждой из которых записана ровно одна конструкция #define. Каждая конструкция имеет вид:</p><p><span class="tex-font-style-bf">#define</span> <span class="tex-font-style-it">name</span> <span class="tex-font-style-it">expression</span></p><p>где</p><p><ul> <li> <span class="tex-font-style-it">name</span> — имя макроса, </li><li> <span class="tex-font-style-it">expression</span> — выражение, на которое будет заменяться данный макрос. Выражение — это непустая строка, составленная из чисел, названий переменных, имён ранее объявленных макросов, круглых скобок и знаков операций +-*/. Гарантируется, что выражение (до и после подстановки макросов) является корректным арифметическим выражением, в котором отсутствуют унарные операции. В выражении содержатся только целые неотрицательные числа, не превосходящие <span class="tex-span">10<sup class="upper-index">9</sup></span>. </li></ul></p><p>Все имена (имена конструкций #define и имена их аргументов) являются строками из латинских символов, чувствительными к регистру. Гарантируется, что имя любой переменной отлично от имени любой конструкции #define.</p><p>Далее, в последней строке записано некоторое выражение <span class="tex-font-style-it">expression</span>, для которого и требуется выполнить проверку. Это выражение непусто и удовлетворяет тем же ограничениям, что и выражения в конструкциях #define.</p><p>Во входных строках может присутствовать произвольное число пробелов в любом месте, если только эти пробелы не разрывают слово &quot;define&quot; или имена конструкций или переменных. В частности, до и после символа &quot;#&quot; может стоять произвольное число пробелов.</p><p>Длина любой строки входного файла не превосходит 100 символов.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите строку &quot;OK&quot;, если выражение корректно с точки зрения критерия, описанного в условии, иначе выведите &quot;Suspicious&quot;.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>1<br />#define sum x + y<br />1 * sum<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>Suspicious<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>1<br />#define sum  (x + y)<br />sum - sum<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>OK<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4<br />#define sum  x + y<br />#define mul  a * b<br />#define div  a / b<br />#define expr sum + mul * div * mul<br />expr<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>OK<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>3<br />#define SumSafe   (a+b)<br />#define DivUnsafe  a/b<br />#define DenominatorUnsafe  a*b<br />((SumSafe) + DivUnsafe/DivUnsafe + x/DenominatorUnsafe)<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>Suspicious<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>

    <br style="clear:both;"/>

    <div id="footer">
        <div><a href="http://codeforces.ru/">Codeforces</a> (c) Copyright 2010-2013 Михаил Мирзаянов</div>
        <div>Соревнования по программированию 2.0</div>

    </div>
</div>
</div>
</body>
</html>                                       
