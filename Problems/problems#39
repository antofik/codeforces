
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="X-Csrf-Token" content="ef15gh6b277883d168h3a18693c051eh"/>
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="-1">
    <meta name="google-site-verification" content="OTd2dN5x4nS4OPknPI9JFg36fKxjqY0i1PSfFPv_J90"/>
    <meta property="fb:admins" content="100001352546622" />
    <meta property="og:image" content="http://worker.codeforces.ru/static/images/codeforces-vk-square-ru.png"/>
    <meta property="og:title" content="Задачи - Codeforces"/>
    <meta property="og:site_name" content="Codeforces"/>
    
    <meta name="cc" content="z2v3soi9qpck"/>
    
    <meta name="verify-reformal" content="f56f99fd7e087fb6ccb48ef2" />
    <title>Задачи - Codeforces</title>
        <meta name="description" content="Codeforces. Соревнования и олимпиады по информатике и программированию, сообщество программистов" />
        <meta name="keywords" content="программирование информатика контест олимпиада алгоритмы c++ java графы vkcup" />
    <meta name="robots" content="index, follow" />

    <link href="http://worker.codeforces.ru/static/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Cuprum&subset=latin,cyrillic' rel='stylesheet' type='text/css'>

    <HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<!--CombineResourcesFilter-->
    
<LINK href="http://worker.codeforces.ru/static/favicon.png" rel="shortcut icon" type="image/png">
    
<LINK href="http://worker.codeforces.ru/static/css/prettify.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/clear.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/style.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/ttypography.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/problem-statement.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/second-level-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/roundbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/datatable.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/topic.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/table-form.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.jgrowl.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/facebox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.wysiwyg.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.autocomplete.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/codeforces.datepick.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/colorbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.drafts.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/skins/markitup/style.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/sets/markdown/style.css" rel="stylesheet" type="text/css">

    
<SCRIPT charset="utf-8" src="//yandex.st/share/share.js" type="text/javascript"></SCRIPT>
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/sidebar-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/community.css" rel="stylesheet" type="text/css">

    <!--[if IE]>
        <style>
            #sidebar {
                padding-left: 1em;
                margin: 1em 1em 1em 0;
            }
        </style>
    <![endif]-->
    
    
<SCRIPT src="http://worker.codeforces.ru/static/js/prettify/prettify.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery-1.8.3.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/sockjs-0.2.1.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/vertxbus-1.2.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.easing.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.lavalamp.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.jgrowl.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/facebox.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.wysiwyg.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.colorpicker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.table.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.image.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.link.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.autocomplete.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.datepick.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ie6blocker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.colorbox-min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ba-bbq.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.drafts.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/codeforces.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/jquery.markitup.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/sets/markdown/set.js" type="text/javascript"></SCRIPT>
    <!--/CombineResourcesFilter-->
</HEAD>
</HTML>

        <script type="text/javascript" src="http://worker.codeforces.ru/static/js/jquery.datepick-ru.js"></script>
        <script src="http://vk.com/js/api/openapi.js" type="text/javascript"></script>
</head>
<body><span style='display:none;' class='csrf-token' data-csrf='ef15gh6b277883d168h3a18693c051eh'>&nbsp;</span>
<!-- Codeforces javascripts. -->
<script type="text/javascript">
    VK.init({apiId: 1961905});
</script>

<script type="text/javascript">
    if (window.parent.frames.length > 0) {
        window.stop();
    }
</script>

    <script type="text/javascript">
        $(document).ready(function() {
    $.ajaxPrefilter(function(options, originalOptions, xhr) {
        var csrf = Codeforces.getCsrfToken();

        if (csrf) {
            var data = originalOptions.data;
            if (originalOptions.data !== undefined) {
                if (Object.prototype.toString.call(originalOptions.data) === '[object String]') {
                    data = $.deparam(originalOptions.data);
                }
            } else {
                data = {};
            }
            options.data = $.param($.extend(data, { csrf_token: csrf }));
        }
    });

    window.updateTypography = function () {
        $("div.ttypography code").addClass("tt");
        $("div.ttypography pre>code").addClass("prettyprint").removeClass("tt");
        $("div.ttypography table").addClass("bordertable");
        prettyPrint();
    }

    $.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/x-www-form-urlencoded; charset=UTF-8", headers: {
        'X-Csrf-Token': Codeforces.getCsrfToken()
    }});

    window.updateTypography();

    Codeforces.signForms();

    $(".second-level-menu-list").lavaLamp({
        fx: "backout",
        speed: 1000
    });


    Codeforces.countdown();
    $("a[rel='photobox']").colorbox();


        });
    </script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-743380-5']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<div id="body">
<div style="width: 950px; margin: 0 auto;">
    <div id="header" style="position:relative;">
        <div style="float:left;">
                <a href="/"><img src="http://worker.codeforces.ru/static/images/codeforces-logo-with-upper-beta.png"/></a>
                        <div style="position:absolute;left:97px;top:40px;">
                            <a href="http://vk.com" class="logo-href">При поддержке <img
                                    style="position:relative;top:5px;" src="http://worker.codeforces.ru/static/images/vkontakte-tiny-ru.png"/></a>
                        </div>
        </div>
        <div class="lang">
            <div style="text-align: right;">
                <a href="?locale=en"><img src="http://worker.codeforces.ru/static/images/flags/24/gb.png" title="In English" alt="In English"/></a>
                <a href="?locale=ru"><img src="http://worker.codeforces.ru/static/images/flags/24/ru.png" title="По-русски" alt="По-русски"/></a>
            </div>
        </div>
        <br style="clear: both;"/>
    </div>

    <div style="text-align: center;font-size: 18px;margin-bottom: 0.5em;"
         class="caption">&#1064;&#1082;&#1086;&#1083;&#1100;&#1085;&#1072;&#1103; &#1082;&#1086;&#1084;&#1072;&#1085;&#1076;&#1085;&#1072;&#1103; &#1086;&#1083;&#1080;&#1084;&#1087;&#1080;&#1072;&#1076;&#1072; #1 (&#1047;&#1050;&#1064; 2010/11)</div>
    <div style="border-top: 1px solid #ccc; height: 1em;"></div>

        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A. Вычисления в C*++</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Язык C*++ похож на C++. Это сходство проявляется в том, что программы на C*++ порой ведут себя непредсказуемо и приводят к совершенно неожиданным эффектам. Например, представим себе арифметическое выражение на C*++, имеющее следующий вид:</p><p><ul> <li> <span class="tex-span"><i>expression</i></span> ::= <span class="tex-span"><i>summand</i></span> | <span class="tex-span"><i>expression</i> + <i>summand</i></span> | <span class="tex-span"><i>expression</i> - <i>summand</i></span> </li><li> <span class="tex-span"><i>summand</i></span> ::= <span class="tex-span"><i>increment</i></span> | <span class="tex-span"><i>coefficient</i></span>*<span class="tex-span"><i>increment</i></span> </li><li> <span class="tex-span"><i>increment</i></span> ::= a++ | ++a </li><li> <span class="tex-span"><i>coefficient</i></span> ::= 0|1|2|...|1000 </li></ul></p><p>Например, <span class="tex-font-style-tt">5*a++-3*++a+a++</span> — это корректное арифметическое выражение на C*++.</p><p>Итак, мы имеем сумму, состоящую из нескольких слагаемых, разделенных знаками «<span class="tex-font-style-tt">+</span>» или «<span class="tex-font-style-tt">-</span>». Каждое слагаемое представляет собой выражение «<span class="tex-font-style-tt">a++</span>» или «<span class="tex-font-style-tt">++a</span>», умноженное на некоторый целый коэффициент. Если коэффициент опущен, то предполагается, что он равен <span class="tex-span">1</span>. </p><p>Вычисление такой суммы в C*++ происходит следующим образом. Сначала по очереди вычисляются все слагаемые, после этого происходит суммирование по обычным арифметическим правилам. Если слагаемое содержит «<span class="tex-font-style-tt">a++</span>», то при его вычислении сначала происходит умножение значения переменной «<span class="tex-font-style-tt">a</span>» на коэффициент, затем значение «<span class="tex-font-style-tt">a</span>» увеличивается на <span class="tex-span">1</span>. Если слагаемое содержит «<span class="tex-font-style-tt">++a</span>», то действия над ним выполняются в обратном порядке: сначала — увеличение «<span class="tex-font-style-tt">a</span>» на <span class="tex-span">1</span>, затем — умножение на коэффициент.</p><p>Порядок вычисления слагаемых может быть любым, поэтому иногда результат вычисления выражения совершенно непредсказуем! Ваша задача — найти наибольшее возможное его значение.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке входного файла задано одно целое число <span class="tex-span"><i>a</i></span> (<span class="tex-span"> - 1000 ≤ <i>a</i> ≤ 1000</span>) — начальное значение переменной «<span class="tex-font-style-tt">a</span>». В следующей строке содержится выражение на языке C*++ описанного вида. Количество слагаемых в выражении не превосходит <span class="tex-span">1000</span>. Гарантируется, что строка, описывающая выражение, не содержит пробелов и знаков табуляции. </p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите единственное число — наибольшее возможное значение выражения.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>1<br />5*a++-3*++a+a++<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>11<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>3<br />a+++++a<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>8<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Рассмотрим второй пример. Сначала <span class="tex-span"><i>a</i> = 3</span>. Пусть сначала вычисляется первое слагаемое, потом — второе. Первое слагаемое получается равным <span class="tex-span">3</span>, и значение <span class="tex-span"><i>a</i></span> увеличивается на <span class="tex-span">1</span>. При вычислении второго слагаемого значение <span class="tex-span"><i>a</i></span> сначала еще раз увеличивается (становится равным <span class="tex-span">5</span>). Значение второго слагаемого — <span class="tex-span">5</span>, и в сумме получаем <span class="tex-span">8</span>. При вычислении сначала второго, а потом первого слагаемого получаем, что оба слагаемых равны <span class="tex-span">4</span> и ответ тоже <span class="tex-span">8</span>.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B. Рост прибыли компании</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Петя работает PR-менеджером процветающей берляндской компании BerSoft. Ему нужно подготовить презентацию о росте прибыли своей компании с <span class="tex-span">2001</span> года (года ее основания) до настоящего времени. Пете известно, что в <span class="tex-span">2001</span> году прибыль компании составила <span class="tex-span"><i>a</i><sub class="lower-index">1</sub></span> млрд. бурлей, в <span class="tex-span">2002</span> году — <span class="tex-span"><i>a</i><sub class="lower-index">2</sub></span> млрд., ..., в нынешнем <span class="tex-span">(2000 + <i>n</i>)</span>-м году — <span class="tex-span"><i>a</i><sub class="lower-index"><i>n</i></sub></span> млрд. бурлей. На основании имеющейся информации Петя задумал отразить в своей презентации линейную динамику роста компании, являющуюся, по его мнению, идеальной. Согласно уже построенному Петей графику, в первый год прибыль компании BerSoft должна составлять <span class="tex-span">1</span> млрд. бурлей, во второй год — <span class="tex-span">2</span> млрд. бурлей и т.д., в каждый следующий год прибыль увеличивается на <span class="tex-span">1</span> млрд. бурлей. К сожалению, реальные цифры отличаются от идеальных. Среди чисел <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> даже могут встречаться отрицательные, свидетельствующие об убытках компании в некоторые годы. Поэтому Петя хочет пренебречь некоторыми данными, иначе говоря, вычеркнуть некоторые числа <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> из последовательности и оставить только некоторую подпоследовательность, имеющую идеальный рост.</p><p>Таким образом, Пете нужно выбрать такую последовательность годов <span class="tex-span"><i>y</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>y</i><sub class="lower-index">2</sub></span>, ..., <span class="tex-span"><i>y</i><sub class="lower-index"><i>k</i></sub></span>, чтобы в год <span class="tex-span"><i>y</i><sub class="lower-index">1</sub></span> прибыль компании составляла <span class="tex-span">1</span> млрд. бурлей, в год <span class="tex-span"><i>y</i><sub class="lower-index">2</sub></span> — <span class="tex-span">2</span> млрд. бурлей, и т.д., в соответствии с идеальной динамикой роста. Помогите ему выбрать наибольшую такую последовательность. </p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 100</span>). В следующей строке заданы <span class="tex-span"><i>n</i></span> целых чисел <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span"> - 100 ≤ <i>a</i><sub class="lower-index"><i>i</i></sub> ≤ 100</span>). Число <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> определяет прибыль компании BerSoft в <span class="tex-span">(2000 + <i>i</i>)</span>-м году. Числа в строке разделены пробелами.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите <span class="tex-span"><i>k</i></span> — наибольшую возможную длину идеальной последовательности. В следующей строке выведите саму последовательность годов <span class="tex-span"><i>y</i><sub class="lower-index">1</sub></span>, <span class="tex-span"><i>y</i><sub class="lower-index">2</sub></span>, ..., <span class="tex-span"><i>y</i><sub class="lower-index"><i>k</i></sub></span>. Числа разделяйте пробелами. Если решений несколько, выведите любое. Если решения не существует, выведите одно число <span class="tex-span">0</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>10<br />-2 1 1 3 2 3 4 -10 -2 5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>5<br />2002 2005 2006 2007 2010<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>3<br />-1 -2 -3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>0<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C. Кратеры на Луне</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Существуют различные теории происхождения кратеров на Луне. Большинство ученых придерживается метеоритной теории, согласно которой кратеры возникли при столкновении небесных тел с Луной. Другая версия — это вулканическое происхождение кратеров. </p><p>Специалист по исследованию внеземного разума профессор Окулов (однофамилец того самого Окулова — автора известных учебников по программированию) выдвинул альтернативную гипотезу. Как вы думаете, какую? Правильно, связанную с вмешательством внеземного разума. Теперь профессор увлечен поиском подтверждений своей гипотезы.</p><p>В распоряжении профессора имеются данные с лунохода, который движется прямолинейно в одном направлении по поверхности Луны. Кратеры имеют форму кругов с целочисленными радиусами. Луноход фиксирует только те кратеры, центры которых лежат на траектории его движения и отправляет на Землю информацию о расстоянии центров кратеров до начальной точки своего движения и их радиусах. </p><p>Согласно теории профессора Окулова, два кратера, созданные внеземным разумом для пока неразгаданных целей, либо полностью вкладываются один в другой, либо не пересекаются вообще. Касание кратеров как внутренним, так и внешним образом допустимо. Однако экспериментальные данные с лунохода не подтверждают эту теорию! Тем не менее профессор Окулов не унывает: он прекрасно понимает, что для создания любой стройной теории необходимо пренебречь некоторыми данными, неверными из-за ошибок измерений (или из-за умелой маскировки внеземного разума, который рано или поздно будет обнаружен профессором Окуловым!). Поэтому Окулов хочет выбрать среди имеющихся описаний кратеров наибольший набор, удовлетворяющий его теории. </p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 2000</span>) — количество обнаруженных кратеров. Следующие <span class="tex-span"><i>n</i></span> строк содержат описания кратеров в формате «<span class="tex-span"><i>c</i><sub class="lower-index"><i>i</i></sub></span> <span class="tex-span"><i>r</i><sub class="lower-index"><i>i</i></sub></span>», где <span class="tex-span"><i>c</i><sub class="lower-index"><i>i</i></sub></span> — координата центра кратера на прямой движения лунохода, <span class="tex-span"><i>r</i><sub class="lower-index"><i>i</i></sub></span> — радиус кратера. Все числа <span class="tex-span"><i>c</i><sub class="lower-index"><i>i</i></sub></span> и <span class="tex-span"><i>r</i><sub class="lower-index"><i>i</i></sub></span> — целые положительные, не превосходящие <span class="tex-span">10<sup class="upper-index">9</sup></span>. Никакие два кратера не совпадают. </p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите количество кратеров в искомом наибольшем наборе. В следующей строке через пробел выведите номера входящих в него кратеров. Кратеры нумеруются числами от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> в порядке задания во входных данных. Номера разрешается выводить в произвольном порядке. Если решений несколько, выведите любое.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>4<br />1 1<br />2 2<br />4 1<br />5 1<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br />1 2 4<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D. Кубическая планета</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Чего только не встретишь в нашей Галактике! Вокруг икосаэдрической звезды вращается кубическая планета. Введем систему координат таким образом, чтобы ребра кубической планеты были параллельны осям координат, а две противоположные вершины лежали в точках <span class="tex-span">(0, 0, 0)</span> и <span class="tex-span">(1, 1, 1)</span>. На планете живут две мухи. В данный момент они сидят в двух различных вершинах кубической планеты. Ваша задача — определить, видят ли они друг друга. Мухи видят друг друга, если занимаемые ими вершины принадлежат одной грани куба.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записаны три целых числа (<span class="tex-span">0</span> или <span class="tex-span">1</span>) через пробел — координаты первой мухи, во второй строке аналогичным образом заданы координаты второй мухи.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите «YES» (без кавычек), если мухи видят друг друга, и «NO» (без кавычек) в противном случае. </p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>0 0 0<br />0 1 0<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>YES<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>1 1 0<br />0 1 0<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>YES<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>0 0 0<br />1 1 1<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>NO<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">E. При чем тут Дирихле?</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Всем вам известен принцип Дирихле, идея которого в том, что размещение по <span class="tex-span"><i>n</i></span> коробкам не менее <span class="tex-span"><i>n</i> + 1</span> предметов влечет существование коробки, в которой хотя бы два предмета.</p><p>Узнав об этом принципе, но не владея техникой логических рассуждений, восьмилетние Стас с Машей придумали игру. Имеется <span class="tex-span"><i>a</i></span> различимых коробок и <span class="tex-span"><i>b</i></span> различимых предметов, за ход можно либо добавить новую коробку, либо — новый предмет. Проигрывает в игре тот игрок, после хода которого число способов разложить по <span class="tex-span"><i>a</i></span> коробкам <span class="tex-span"><i>b</i></span> предметов становится не меньше некоторого заданного числа <span class="tex-span"><i>n</i></span>. Все коробки и предметы считаются различными. Возможно, некоторые коробки останутся пустыми.</p><p>Кто проиграет при оптимальной игре обоих игроков, если первым ходит Стас?</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В единственной строке входного файла записано три целых числа <span class="tex-span"><i>a</i>, <i>b</i>, <i>n</i></span> (<span class="tex-span">1 ≤ <i>a</i> ≤ 10000</span>, <span class="tex-span">1 ≤ <i>b</i> ≤ 30</span>, <span class="tex-span">2 ≤ <i>n</i> ≤ 10<sup class="upper-index">9</sup></span>) — начальное число коробок, предметов и число, ограничивающее количество способов, соответственно. Гарантируется, что изначальное количество способов строго меньше <span class="tex-span"><i>n</i></span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите «Stas», если победит Маша. Выведите «Masha», если победит Стас. Если будет ничья, то выведите «Missing».</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2 2 10<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>Masha<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5 5 16808<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>Masha<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>3 1 4<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>Stas<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>1 4 10<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>Missing<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Во втором примере первоначальное количество способов равно <span class="tex-span">3125</span>. <ul> <li> Если Стас увеличит число коробок, то проиграет, так как Маша следующим ходом может еще раз увеличить число коробок. После этого любой ход Стаса приведет к поражению. </li><li> Если же Стас увеличит число предметов, то любой машин ход будет проигрышным. </li></ul></p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">F. Лягушки-пацифисты</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>С Дюймовочкой приключилась беда. Она оказалась на маленьком островке посреди болота и очень хочет выбраться на берег.</p><p>Выбраться из болота можно только по кочкам, которые расположены вдоль прямой линии, соединяющей островок с берегом. Будем считать, что кочки пронумерованы числами от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span> и номер кочки соответствует расстоянию в метрах от островка до нее. Расстояние от <span class="tex-span"><i>n</i></span>-й кочки до берега тоже <span class="tex-span">1</span> метр.</p><p>Дюймовочка слишком маленькая, чтобы прыгать на такие расстояния. К счастью, ей предложила помощь семья лягушек, обитающих в болоте. Каждая из них согласна подвезти Дюймовочку, но Дюймовочка должна выбрать только одну лягушку. Любая лягушка имеет определенную длину прыжка. Если Дюймовочка согласится на помощь лягушки с длиной прыжка <span class="tex-span"><i>d</i></span>, то лягушка прыгнет с островка на кочку с номером <span class="tex-span"><i>d</i></span>, далее — на кочку с номером <span class="tex-span">2<i>d</i></span>, затем <span class="tex-span">3<i>d</i></span>, и так до тех пор, пока не выберется на берег (т.е. окажется дальше <span class="tex-span"><i>n</i></span>-й кочки).</p><p>Однако есть еще одна проблема: в болоте также обитают комары. Сейчас у них тихий час, и они спят, разместившись на некоторых кочках. Если лягушка прыгнет на кочку с комаром, то она раздавит его. Встретившиеся Дюймовочке лягушки по своим убеждениям пацифисты, поэтому их сильно огорчит гибель любого комара. Помогите Дюймовочке выбрать такую лягушку, которая доставит ее на берег и при этом задавит как можно меньше комаров.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке заданы три целых числа <span class="tex-span"><i>n</i></span>, <span class="tex-span"><i>m</i></span> и <span class="tex-span"><i>k</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 10<sup class="upper-index">9</sup></span>, <span class="tex-span">1 ≤ <i>m</i>, <i>k</i> ≤ 100</span>) — количество кочек, лягушек и комаров соответственно. Во второй строке содержатся <span class="tex-span"><i>m</i></span> целых чисел <span class="tex-span"><i>d</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>d</i><sub class="lower-index"><i>i</i></sub> ≤ 10<sup class="upper-index">9</sup></span>) — длины прыжков лягушек. В третьей строке записаны <span class="tex-span"><i>k</i></span> целых чисел — номера кочек, на которых спит каждый комар. На одной кочке может спать не более одного комара. Числа в строках разделены одиночными пробелами.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите количество лягушек, которые задавят наименьшее число комаров, во второй — их номера в порядке возрастания, разделенные пробелами. Лягушки номеруются числами от <span class="tex-span">1</span> до <span class="tex-span"><i>m</i></span> в порядке задания длин их прыжков во входных данных.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>5 3 5<br />2 3 4<br />1 2 3 4 5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br />2 3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>1000000000 2 3<br />2 5<br />999999995 999999998 999999996<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br />2<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">G. Обратная функция</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>5 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Петя написал программу на C++, вычисляющую значение одной интересной функции <span class="tex-span"><i>f</i>(<i>n</i>)</span>. Петя запустил программу при некотором значении <span class="tex-span"><i>n</i></span> и отправился на кухню пить чай. О том, сколько времени работала программа, история умалчивает. Когда Петя вернулся, она уже закончила выполнение и выдала результат. Однако пока Петя пил чай, коварный вирус успел уничтожить входной файл, поэтому Петя не может восстановить, для какого значения <span class="tex-span"><i>n</i></span> была запущена программа. Помогите Пете: реализуйте обратную функцию!</p><p>Основную часть программы представляет собой функция на C++ со следующим упрощенным синтаксисом:</p><p><ul> <li> <span class="tex-span"><i>function</i></span> ::= int f(int n) {<span class="tex-span"><i>operatorSequence</i></span>}</li></ul></p><p><li> <span class="tex-span"><i>operatorSequence</i></span> ::= <span class="tex-span"><i>operator</i> | <i>operator</i> <i>operatorSequence</i></span></li></p><p><li> <span class="tex-span"><i>operator</i></span> ::= return <span class="tex-span"><i>arithmExpr</i></span>; <span class="tex-span">|</span> if (<span class="tex-span"><i>logicalExpr</i></span>) return <span class="tex-span"><i>arithmExpr</i></span>;</li></p><p><li> <span class="tex-span"><i>logicalExpr</i></span> ::= <span class="tex-span"><i>arithmExpr</i> &gt; <i>arithmExpr</i></span> <span class="tex-span">|</span> <span class="tex-span"><i>arithmExpr</i> &lt; <i>arithmExpr</i></span> <span class="tex-span">|</span> <span class="tex-span"><i>arithmExpr</i></span> == <span class="tex-span"><i>arithmExpr</i></span></li></p><p><li> <span class="tex-span"><i>arithmExpr</i></span> ::= <span class="tex-span"><i>sum</i></span></li></p><p><li> <span class="tex-span"><i>sum</i></span> ::= <span class="tex-span"><i>product</i></span> <span class="tex-span">|</span> <span class="tex-span"><i>sum</i> + <i>product</i></span> <span class="tex-span">|</span> <span class="tex-span"><i>sum</i> - <i>product</i></span></li></p><p><li> <span class="tex-span"><i>product</i></span> ::= <span class="tex-span"><i>multiplier</i></span> <span class="tex-span">|</span> <span class="tex-span"><i>product</i> * <i>multiplier</i></span> <span class="tex-span">|</span> <span class="tex-span"><i>product</i> / <i>multiplier</i></span></li></p><p><li> <span class="tex-span"><i>multiplier</i></span> ::= n <span class="tex-span">|</span> <span class="tex-span"><i>number</i></span> <span class="tex-span">|</span> f(<span class="tex-span"><i>arithmExpr</i></span>)</li></p><p><li> <span class="tex-span"><i>number</i></span> ::= <span class="tex-span">0|1|2|... |32767</span> </li></p><p>Пробелы и переводы строк в <span class="tex-span"><i>operatorSequence</i></span> — необязательны.</p><p>Таким образом, имеется функция, в теле которой встречается два вида операторов. Это оператор &quot;return <span class="tex-span"><i>arithmExpr</i></span>;&quot;, возвращающий в качестве значения функции значение арифметического выражения, и условный оператор &quot;if (<span class="tex-span"><i>logicalExpr</i></span>) return <span class="tex-span"><i>arithmExpr</i></span>;&quot;, который возвращает значение арифметического выражения в том и только в том случае, когда выполняется логическое выражение. Гарантируется, что никакие другие конструкции языка C++: циклы, операторы присваивания, вложенные условные операторы и т.д. и другие переменные, кроме параметра <span class="tex-span"><i>n</i></span>, в функции не используются. Все константы являются целыми числами из промежутка <span class="tex-span">[0..32767]</span>.</p><p>Операторы выполняются последовательно. После того, как произойдет возврат функцией некоторого значения, остальные операторы в последовательности не выполняются. Арифметические выражения вычисляются с учетом стандартного приоритета операций. Это означает, что сначала вычисляются все произведения, входящие в сумму. При вычислении произведения операции умножения и деления выполняются слева направо. Затем происходит суммирование слагаемых, при этом сложение и вычитание тоже выполняются слева направо. Операции &quot;&gt;&quot; (больше), &quot;&lt;&quot; (меньше) и &quot;==&quot; (равно) тоже имеют стандартный смысл.</p><p>Теперь внимание! Программа компилируется с помощью разработанного берляндской компанией BerSoft <span class="tex-span">15</span>-битного компилятора Berland C++, поэтому арифметические действия выполняются нестандартным образом. Сложение, вычитание и умножение выполняются по модулю <span class="tex-span">32768</span> (если при вычитании получается отрицательное число, то к нему прибавляется <span class="tex-span">32768</span> до тех пор, пока оно не окажется в промежутке <span class="tex-span">[0..32767]</span>). Деление &quot;/&quot; — это обычное целочисленное деление с отбрасыванием остатка. </p><p>Примеры арифметических действий: <center class="tex-equation"><img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/8ad212e9d903275cafc1b8d675eb4e4dca7d7f9b.png" /></center></p><p>Гарантируется, что при любом значении <span class="tex-span"><i>n</i></span> от <span class="tex-span">0</span> до <span class="tex-span">32767</span> заданная функция выполняется корректно. Это означает, что:</p><p>1. Не происходит деления на <span class="tex-span">0</span>.</p><p>2. При выполнении функции для значения <span class="tex-span"><i>n</i> = <i>N</i></span> рекурсивные вызовы функции <span class="tex-span"><i>f</i></span> могут роисходить только для значений параметра <span class="tex-span">0, 1, ..., <i>N</i> - 1</span>. Следовательно, программа никогда не уходит в бесконечную рекурсию.</p><p>3. В итоге выполнения последовательности операторов обязательно происходит возврат значения функции.</p><p>Заметим, что в силу всех введенных ограничений значение, возвращаемое функцией <span class="tex-span"><i>f</i></span>, не зависит ни от глобальных переменных, ни от порядка вычисления арифметических выражений в составе логического, ни от чего либо другого, кроме значения параметра <span class="tex-span"><i>n</i></span>. Поэтому функцию <span class="tex-span"><i>f</i></span> можно рассматривать как функцию в математическом смысле, т.е. как однозначное соответствие каждому значению <span class="tex-span"><i>n</i></span> из промежутка <span class="tex-span">[0..32767]</span> значения <span class="tex-span"><i>f</i>(<i>n</i>)</span> из того же промежутка. </p><p>Вам дано значение <span class="tex-span"><i>f</i>(<i>n</i>)</span>, нужно найти <span class="tex-span"><i>n</i></span>. Если подходящих значений <span class="tex-span"><i>n</i></span> несколько, требуется определить максимальное (из промежутка <span class="tex-span">[0..32767]</span>).</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>f</i>(<i>n</i>)</span> из промежутка <span class="tex-span">[0..32767]</span>. В следующих строках содержится описание функции <span class="tex-span"><i>f</i></span>. В описании могут встречаться дополнительные пробелы и переводы строки (см. примеры), которые, разумеется, не могут разрывать ключевые слова int, if, return и числа. Размер входных данных не превосходит <span class="tex-span">100</span> байт.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите единственное число — ответ на задачу. Если решения не существует, выведите &quot;-1&quot; (без кавычек).</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>17<br />int f(int n)<br />{<br />if (n &lt; 100) return 17;<br />if (n &gt; 99) return 27;<br />}<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>99<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>13<br />int f(int n)<br />{<br />if (n == 0) return 0;<br />return f(n - 1) + 1;<br />}<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>13</pre></div><div class="input"><div class="title">Входные данные</div><pre>144<br />int f(int n)<br />{<br />if (n == 0) return 0;<br />if (n == 1) return n;<br />return f(n - 1) + f(n - 2);<br />}</pre></div><div class="output"><div class="title">Выходные данные</div><pre>24588<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">H. Таблица умножения</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Петя изучает позиционные системы счисления. Он уже научился складывать и вычитать числа в системах счисления с различными основаниями и теперь перешел к более сложному действию — умножению. Для того, чтобы умножать большие числа, нужно сначала выучить таблицу умножения. К сожалению, во втором классе (а некоторые даже в первом) учат только таблицу умножения десятичных чисел. Помогите Пете построить таблицу умножения для чисел в системе счисления с основанием <span class="tex-span"><i>k</i></span>.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится единственное целое число <span class="tex-span"><i>k</i></span> (<span class="tex-span">2 ≤ <i>k</i> ≤ 10</span>) — основание системы счисления.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите таблицу умножения для системы счисления с основанием <span class="tex-span"><i>k</i></span>. Таблица должна содержать <span class="tex-span"><i>k</i> - 1</span> строку и <span class="tex-span"><i>k</i> - 1</span> столбец. Элемент на пересечении <span class="tex-span"><i>i</i></span>-й строки и <span class="tex-span"><i>j</i></span>-го столбца равен произведению чисел <span class="tex-span"><i>i</i></span> и <span class="tex-span"><i>j</i></span> в <span class="tex-span"><i>k</i></span>-ичной системе счисления. Между числами в каждой строке может содержаться произвольное количество пробелов (в примерах лишние пробелы выведены для наглядности). </p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>10<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1  2  3  4  5  6  7  8  9<br />2  4  6  8 10 12 14 16 18<br />3  6  9 12 15 18 21 24 27<br />4  8 12 16 20 24 28 32 36<br />5 10 15 20 25 30 35 40 45<br />6 12 18 24 30 36 42 48 54<br />7 14 21 28 35 42 49 56 63<br />8 16 24 32 40 48 56 64 72<br />9 18 27 36 45 54 63 72 81<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1  2<br />2 11</pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">I. Трамвай</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>В берляндском городе С*** есть трамвайное депо и всего один трамвай. В депо работают три человека: водитель трамвая, кондуктор и начальник депо. Раньше трамвай каждое утро выезжал из депо и ездил по круговому маршруту. При этом трамвай проходил маршрут ровно за <span class="tex-span"><i>c</i></span> минут. Начальник депо контролировал движение трамвая, выходя на улицу через каждые <span class="tex-span"><i>c</i></span> минут, когда трамвай проезжал мимо депо, и лишал водителя трамвая премии, если тот опаздывал хотя бы на секунду.</p><p>Так было в прежние времена. Впоследствии из федерального бюджета Берляндии были выделены средства на расширение сети трамвайных путей в городе С***, и, как иногда бывает, средства были использованы по назначению. Сеть трамвайных путей была перестроена, в результате чего превратилась в обширную и разветвленную систему. Возможно, прежний круговой маршрут был разрушен. В городе С*** <span class="tex-span"><i>n</i></span> перекрестков и теперь <span class="tex-span"><i>m</i></span> трамвайных путей, соединяющих пары перекрестков. Движение в Берляндии одностороннее, поэтому по каждому из путей трамвай может ехать в одном направлении. Между двумя перекрестками может проходить несколько трамвайных путей, с одним или разными направлениями движения. Каждый путь соединяет пару различных перекрестков и имеет такую длину, что трамвай проходит его ровно за <span class="tex-span">1</span> минуту. Для каждого перекрестка существует хотя бы один путь, по которому можно уехать с этого перекрестка. </p><p>Итак, трамвайные пути были построены, но почему-то никто не позаботился об увеличении количества трамваев в городе С***! Трамвай так и продолжал ездить в одиночестве, но теперь у водителя появилась прекрасная возможность избавиться от неусыпного контроля начальника депо. Ведь благодаря разветвленной сети он получил свободу в выборе маршрута! Теперь водитель, достигнув очередного перекрестка, может выбрать путь, по которому поедет, произвольным образом. При этом трамвай может уехать даже в такие районы города С***, откуда невозможно вернуться обратно в депо из-за однонаправленного движения. Водитель не боится этой трудности: ночью, когда город спит, можно незаметно вернуться в депо, двигаясь по путям в обратном направлении.</p><p>Горожане ликовали. Ведь некоторые из них ждали трамвая на своих улицах вот уже несколько лет. Однако поведение водителя привело в ярость начальника депо. Теперь он вынашивает коварный план установки видеонаблюдения за непокорным трамваем.</p><p>План заключается в следующем. Начальник депо хочет установить видеокамеры на некоторых перекрестках, выбрать промежуток времени <span class="tex-span"><i>t</i></span> и через каждые <span class="tex-span"><i>t</i></span> минут отвлекаться от любимой телепередачи, чтобы проверить местоположение трамвая по камерам. При этом начальник депо хочет, чтобы во все моменты времени, кратные <span class="tex-span"><i>t</i></span>, и только в них трамвай оказывался на перекрестке под камерой наблюдения. На перекрестке, где находится депо, камера должна быть установлена обязательно, с целью предотвращения возможного теракта против начальника депо. Среди всех возможных планов начальник депо выбирает план с наибольшим значением <span class="tex-span"><i>t</i></span> (уж очень не любит он отвлекаться от любимой телепередачи, но приходится). Если таких планов несколько, выбирается тот, для которого требуется как можно меньше камер наблюдения. Найдите такой план. </p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержатся целые числа <span class="tex-span"><i>n</i></span> и <span class="tex-span"><i>m</i></span> (<span class="tex-span">2 ≤ <i>n</i>, <i>m</i> ≤ 10<sup class="upper-index">5</sup></span>) — количество перекрестков и количество трамвайных путей в городе С*** соответственно. Следующие <span class="tex-span"><i>m</i></span> строк содержат описания путей в формате «<span class="tex-span"><i>u</i></span> <span class="tex-span"><i>v</i></span>», где <span class="tex-span"><i>u</i></span> — начальный перекресток пути, а <span class="tex-span"><i>v</i></span> — его конечный перекресток. Перекрестки пронумерованы целыми числами от <span class="tex-span">1</span> до <span class="tex-span"><i>n</i></span>, причем трамвайное депо находится на перекрестке с номером <span class="tex-span">1</span>.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите значение <span class="tex-span"><i>t</i></span>. В следующей строке выведите число <span class="tex-span"><i>k</i></span> — необходимое количество камер наблюдения. В следующей строке через пробел выведите номера перекрестков, на которых следует установить камеры. Номера выводите в порядке возрастания. </p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>4 5<br />1 2<br />2 3<br />3 4<br />4 1<br />1 4<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br />2<br />1 3<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">J. Проверка правописания</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Петя заметил, что когда он набирает текст на клавиатуре, у него часто нажимаются лишние клавиши и в словах возникают лишние буквы. Конечно же, система проверки правописания подчеркивает ему эти слова, ему приходится кликать на слово и выбирать правильный вариант. Пете надоело исправлять свои ошибки вручную, поэтому он решил реализовать функцию, которая сама будет вносить исправления. Петя начал с разбора наиболее часто встречающегося у него случая, когда из слова достаточно удалить одну букву, чтобы оно совпало с некоторым словом из словаря. Итак, Петя столкнулся с такой подзадачей: дано введенное слово и слово из словаря, нужно удалить из первого слова одну букву, чтобы получилось второе. И тогда перед Петей встал весьма нетривиальный вопрос: какую букву удалять?</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Входные данные содержат две строки, состоящие из строчных латинских букв. Длина строк от <span class="tex-span">1</span> до <span class="tex-span">10<sup class="upper-index">6</sup></span> символов включительно, первая строка содержит ровно на <span class="tex-span">1</span> символ больше, чем вторая.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите количество позиций символов в первой строке, при удалении каждого из которых получается вторая строка. Во второй строке через пробел выведите сами позиции в порядке возрастания. Позиции нумеруются с <span class="tex-span">1</span>. Если из первой строки невозможно получить вторую путем удаления одного символа, выведите одно число <span class="tex-span">0</span>. </p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>abdrakadabra<br />abrakadabra<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br />3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>aa<br />a<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2<br />1 2<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>competition<br />codeforces<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>0<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 2em;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">K. Испытания</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>2 seconds</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>64 megabytes</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Вы участвуете в испытаниях нового оружия. Для испытаний создан полигон, представляющий собой прямоугольное поле размера <span class="tex-span"><i>n</i> × <i>m</i></span>, разделенное на единичные квадраты <span class="tex-span">1 × 1</span>. На полигоне расположено <span class="tex-span"><i>k</i></span> объектов, каждый из которых является прямоугольником со сторонами, параллельными сторонам полигона, занимающим полностью несколько единичных квадратов. Объекты не пересекаются и не касаются друг друга.</p><p>Принцип действия оружия сверхсекретен. Вам известно лишь то, что с помощью него можно нанести удар по любой прямоугольной области ненулевой площади со сторонами, параллельными сторонам полигона. Область должна накрывать полностью некоторые из единичных квадратов, на которые разбит полигон, и никак не затрагивать остальные квадраты. Разумеется, область не должна выходить за границы полигона. При этом вам поставлена задача: поразить не менее одного и не более трех прямоугольных объектов. Каждый объект должен лежать либо целиком внутри области (тогда он считается пораженным), либо целиком вне области.</p><p>Посчитайте количество способов нанести удар. </p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержатся три целых числа <span class="tex-span"><i>n</i></span>, <span class="tex-span"><i>m</i></span> и <span class="tex-span"><i>k</i></span> (<span class="tex-span">1 ≤ <i>n</i>, <i>m</i> ≤ 1000</span>, <span class="tex-span">1 ≤ <i>k</i> ≤ 90</span>) — размеры полигона и количество объектов на нем, соответственно. Следующие <span class="tex-span"><i>n</i></span> строк содержат по <span class="tex-span"><i>m</i></span> символов каждая и описывают полигон. Символ «<span class="tex-font-style-tt">*</span>» означает, что соответствующий квадрат на полигоне занят объектом, символ «<span class="tex-font-style-tt">.</span>» обозначает пустое пространство. Гарантируется, что символы «<span class="tex-font-style-tt">*</span>» образуют ровно <span class="tex-span"><i>k</i></span> связных прямоугольных областей, отвечающих условию задачи.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>Выведите единственное число — количество способов нанести удар.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3 3 3<br />*.*<br />...<br />*..<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>21<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4 5 4<br />.*.**<br />...**<br />**...<br />...**<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>38<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>2 2 1<br />.*<br />..<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>4<br /></pre></div></div></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>

    <br style="clear:both;"/>

    <div id="footer">
        <div><a href="http://codeforces.ru/">Codeforces</a> (c) Copyright 2010-2013 Михаил Мирзаянов</div>
        <div>Соревнования по программированию 2.0</div>

    </div>
</div>
</div>
</body>
</html>                                       
