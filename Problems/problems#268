
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="X-Csrf-Token" content="3c1f0b8h5f54c6055a4194h3990ad401"/>
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="-1">
    <meta name="google-site-verification" content="OTd2dN5x4nS4OPknPI9JFg36fKxjqY0i1PSfFPv_J90"/>
    <meta property="fb:admins" content="100001352546622" />
    <meta property="og:image" content="http://worker.codeforces.ru/static/images/codeforces-vk-square-ru.png"/>
    <meta property="og:title" content="Задачи - Codeforces"/>
    <meta property="og:site_name" content="Codeforces"/>
    
    <meta name="cc" content="141wlqw2fgkrw"/>
    
    <meta name="verify-reformal" content="f56f99fd7e087fb6ccb48ef2" />
    <title>Задачи - Codeforces</title>
        <meta name="description" content="Codeforces. Соревнования и олимпиады по информатике и программированию, сообщество программистов" />
        <meta name="keywords" content="программирование информатика контест олимпиада алгоритмы c++ java графы vkcup" />
    <meta name="robots" content="index, follow" />

    <link href="http://worker.codeforces.ru/static/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Cuprum&subset=latin,cyrillic' rel='stylesheet' type='text/css'>

    <HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<!--CombineResourcesFilter-->
    
<LINK href="http://worker.codeforces.ru/static/favicon.png" rel="shortcut icon" type="image/png">
    
<LINK href="http://worker.codeforces.ru/static/css/prettify.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/clear.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/style.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/ttypography.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/problem-statement.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/second-level-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/roundbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/datatable.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/topic.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/table-form.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.jgrowl.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/facebox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.wysiwyg.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.autocomplete.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/codeforces.datepick.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/colorbox.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/jquery.drafts.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/skins/markitup/style.css" rel="stylesheet" type="text/css">
    
<LINK href="http://worker.codeforces.ru/static/markitup/sets/markdown/style.css" rel="stylesheet" type="text/css">

    
<SCRIPT charset="utf-8" src="//yandex.st/share/share.js" type="text/javascript"></SCRIPT>
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/sidebar-menu.css" rel="stylesheet" type="text/css">
    
<LINK charset="utf-8" href="http://worker.codeforces.ru/static/css/community.css" rel="stylesheet" type="text/css">

    <!--[if IE]>
        <style>
            #sidebar {
                padding-left: 1em;
                margin: 1em 1em 1em 0;
            }
        </style>
    <![endif]-->
    
    
<SCRIPT src="http://worker.codeforces.ru/static/js/prettify/prettify.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery-1.8.3.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/sockjs-0.2.1.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/vertxbus-1.2.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.easing.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.lavalamp.min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.jgrowl.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/facebox.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.wysiwyg.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.colorpicker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.table.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.image.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/controls/wysiwyg.link.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.autocomplete.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.datepick.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ie6blocker.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.colorbox-min.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.ba-bbq.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/jquery.drafts.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/js/codeforces.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/jquery.markitup.js" type="text/javascript"></SCRIPT>
    <SCRIPT src="http://worker.codeforces.ru/static/markitup/sets/markdown/set.js" type="text/javascript"></SCRIPT>
    <!--/CombineResourcesFilter-->
</HEAD>
</HTML>

        <script type="text/javascript" src="http://worker.codeforces.ru/static/js/jquery.datepick-ru.js"></script>
        <script src="http://vk.com/js/api/openapi.js" type="text/javascript"></script>
</head>
<body><span style='display:none;' class='csrf-token' data-csrf='3c1f0b8h5f54c6055a4194h3990ad401'>&nbsp;</span>
<!-- Codeforces javascripts. -->
<script type="text/javascript">
    VK.init({apiId: 1961905});
</script>

<script type="text/javascript">
    if (window.parent.frames.length > 0) {
        window.stop();
    }
</script>

    <script type="text/javascript">
        $(document).ready(function() {
    $.ajaxPrefilter(function(options, originalOptions, xhr) {
        var csrf = Codeforces.getCsrfToken();

        if (csrf) {
            var data = originalOptions.data;
            if (originalOptions.data !== undefined) {
                if (Object.prototype.toString.call(originalOptions.data) === '[object String]') {
                    data = $.deparam(originalOptions.data);
                }
            } else {
                data = {};
            }
            options.data = $.param($.extend(data, { csrf_token: csrf }));
        }
    });

    window.updateTypography = function () {
        $("div.ttypography code").addClass("tt");
        $("div.ttypography pre>code").addClass("prettyprint").removeClass("tt");
        $("div.ttypography table").addClass("bordertable");
        prettyPrint();
    }

    $.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/x-www-form-urlencoded; charset=UTF-8", headers: {
        'X-Csrf-Token': Codeforces.getCsrfToken()
    }});

    window.updateTypography();

    Codeforces.signForms();

    $(".second-level-menu-list").lavaLamp({
        fx: "backout",
        speed: 1000
    });


    Codeforces.countdown();
    $("a[rel='photobox']").colorbox();


        });
    </script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-743380-5']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<div id="body">
<div style="width: 950px; margin: 0 auto;">
    <div id="header" style="position:relative;">
        <div style="float:left;">
                <a href="/"><img src="http://worker.codeforces.ru/static/images/codeforces-logo-with-upper-beta.png"/></a>
                        <div style="position:absolute;left:97px;top:40px;">
                            <a href="http://vk.com" class="logo-href">При поддержке <img
                                    style="position:relative;top:5px;" src="http://worker.codeforces.ru/static/images/vkontakte-tiny-ru.png"/></a>
                        </div>
        </div>
        <div class="lang">
            <div style="text-align: right;">
                <a href="?locale=en"><img src="http://worker.codeforces.ru/static/images/flags/24/gb.png" title="In English" alt="In English"/></a>
                <a href="?locale=ru"><img src="http://worker.codeforces.ru/static/images/flags/24/ru.png" title="По-русски" alt="По-русски"/></a>
            </div>
        </div>
        <br style="clear: both;"/>
    </div>

    <div style="text-align: center;font-size: 18px;margin-bottom: 0.5em;"
         class="caption">Codeforces Round #164 (Div. 2)</div>
    <div style="border-top: 1px solid #ccc; height: 1em;"></div>

        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">A. Матчи</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 секунда</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Манао работает на спортивном телевидении. Он долгое время наблюдал за футбольными матчами чемпионата одной страны и начал замечать разные закономерности. Например, у каждой команды есть две формы: домашняя и выездная. Когда команда проводит матч на своем стадионе, футболисты надевают домашнюю форму, а когда на чужом — выездную. Единственное исключение из этого правила — когда цвет домашней формы принимающей команды совпадает с цветом формы гостей. В таком случае домашняя команда облачается в свою выездную форму. Цвета домашней и выездной формы для каждой команды различны.</p><p>В чемпионате страны участвует <span class="tex-span"><i>n</i></span> команд и он состоит из <span class="tex-span"><i>n</i>·(<i>n</i> - 1)</span> матчей: каждая из команд принимает каждую другую команду на своем стадионе. Манао задумался, а сколько раз в течение одного чемпионата случится, что команда, играющая на своем стадионе, оденет выездную форму? Обратите внимание, что для подсчета этого количества порядок матчей не играет никакого значения.</p><p>Вам даны цвета домашней и выездной формы каждой команды. Для удобства эти цвета пронумерованы целыми числами таким образом, что никакие два разных цвета не имеют одинаковый номер. Помогите Манао найти ответ на его вопрос.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке содержится целое число <span class="tex-span"><i>n</i></span> (<span class="tex-span">2 ≤ <i>n</i> ≤ 30</span>). В каждой из следующих <span class="tex-span"><i>n</i></span> строк записана пара разделенных одним пробелом различных целых чисел <span class="tex-span"><i>h</i><sub class="lower-index"><i>i</i></sub></span>, <span class="tex-span"><i>a</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">1 ≤ <i>h</i><sub class="lower-index"><i>i</i></sub>, <i>a</i><sub class="lower-index"><i>i</i></sub> ≤ 100</span>) — номер цвета домашней и выездной форм <span class="tex-span"><i>i</i></span>-ой команды соответственно.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В единственной строке выведите количество матчей, в которых домашняя команда выступит в выездной форме.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3<br />1 2<br />2 4<br />3 4<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>1<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4<br />100 42<br />42 100<br />5 42<br />100 5<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>5<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>2<br />1 2<br />1 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>0<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>В первом тестовом примере чемпионат состоит из 6 матчей. Единственный поединок, в котором произойдет интересное нам событие — матч между командами 2 и 1 на стадионе команды 2.</p><p>Во втором тестовом примере домашней команде придется сменить форму в матчах между командами: 1 и 2, 2 и 1, 2 и 3, 3 и 4, 4 и 2 (первой написана принимающая команда).</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">B. Кнопки</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 секунда</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Манао пытается взломать очень любопытный замок. На замке есть <span class="tex-span"><i>n</i></span> кнопок, которые нужно нажать в определенной последовательности, чтобы открыть его. Когда происходит нажатие на какую-либо кнопку, она либо остается зажатой, что означает, что она действительно является следующей в последовательности, либо она сбрасывается вместе со всеми зажатыми в данный момент кнопками. Когда одновременно оказываются зажаты все кнопки, замок открывается.</p><p>Рассмотрим пример с тремя кнопками. Скажем, последовательность нажатия кнопок, открывающая замок, равна: {2, 3, 1}. Если сначала нажать на кнопки 1 или 3, они немедленно сбросятся. Если нажать на кнопку 2, она останется зажатой. Если после нажатия кнопки 2 нажать на кнопку 1, то все кнопки сбросятся. Если же после нажатия кнопки 2 нажать на кнопку 3 — она останется зажатой вместе с кнопкой 2. При двух зажатых кнопках остается лишь нажать на кнопку 1, чтобы замок открылся.</p><p>Манао не знает последовательность, в которой нужно нажимать кнопки, чтобы открыть замок. Зато он очень умный и будет действовать оптимально. Вычислите количество нажатий, которое ему придется произвести для открытия замка в худшем случае.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>Единственная строка содержит целое число <span class="tex-span"><i>n</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 2000</span>) — количество кнопок у замка.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В единственной строке выведите количество нажатий в худшем случае.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>7<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Рассмотрим первый тестовый пример. Манао может не повезти с первым нажатием и он нажмет не на ту кнопку, на которую надо было нажимать первой. В таком случае вторым ходом он уже может отгадать первую кнопку. А третьим — вторую кнопку. Таким образом, в худшем случае ему понадобится всего 3 нажатия.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">C. Красивые множества точек</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 секунда</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Манао изобрел новый математический термин — красивое множество точек. Он называет множество точек на плоскости <span class="tex-font-style-it">красивым</span>, если выполняются следующие условия:</p><p><ol> <li> Координаты каждой точки множества — целые числа. </li><li> Для любых двух точек из этого множества, расстояние между ними — нецелое число. </li></ol></p><p>Рассмотрим все точки <span class="tex-span">(<i>x</i>, <i>y</i>)</span>, удовлетворяющие неравенствам: <span class="tex-span">0 ≤ <i>x</i> ≤ <i>n</i></span>; <span class="tex-span">0 ≤ <i>y</i> ≤ <i>m</i></span>; <span class="tex-span"><i>x</i> + <i>y</i> &gt; 0</span>. Выберите из них как можно больше точек, так чтобы все выбранные точки образовывали красивое множество.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В единственной строке записаны два разделенных пробелом целых числа <span class="tex-span"><i>n</i></span> и <span class="tex-span"><i>m</i></span> (<span class="tex-span">1 ≤ <i>n</i>, <i>m</i> ≤ 100</span>).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В первой строке выведите целое число — размер найденного красивого множества <span class="tex-span"><i>k</i></span>. В следующих <span class="tex-span"><i>k</i></span> строках выведите по паре разделенных пробелом целых чисел — соответственно <span class="tex-span"><i>x</i></span>- и <span class="tex-span"><i>y</i></span>- координаты выбранных в множество точек.</p><p>Если существует несколько оптимальных решений, разрешается вывести любое.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>2 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>3<br />0 1<br />1 2<br />2 0<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>4<br />0 3<br />2 1<br />3 0<br />4 2<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Рассмотрим первый пример. Расстояние между точками (0, 1) и (1, 2) равно <img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/bfe16f27ebc966df6f10ba356a1547b6e7242dd7.png" />, между (0, 1) и (2, 0) — <img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/23d63d8a57cddda72562a512c05111054cd85870.png" />, между (1, 2) и (2, 0) — <img align="middle" class="tex-formula" src="http://codeforces.ru/renderer/23d63d8a57cddda72562a512c05111054cd85870.png" />. Таким образом, эти точки составляют красивое множество. Красивое множество с больше чем тремя точками из заданных точек выбрать невозможно. Заметьте, что это не единственный возможный ответ.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 4em;page-break-after: always;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">D. Шведская стенка</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>4 секунды</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>512 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Манао работает в строительной компании. Недавно к ним пришел заказ на строительство шведских стенок в детском парке. Манао поручили разработать план постройки, который даст возможность компании максимально сэкономить средства.</p><p>Изучив формальные спецификации для шведской стенки, Манао обнаружил целый ряд неоднозначных требований и решил трактовать их в свою пользу. В итоге конструкция, в которую превратился заказ, формально описывается следующим образом:</p><p><ul> <li> Введем некоторую единицу длины. Центр конструкции — шест высотой <span class="tex-span"><i>n</i></span>. </li><li> На высотах <span class="tex-span">1, 2, ..., <i>n</i></span> из шеста торчит ровно одна горизонтальная палка. Каждая палка торчит в одном из четырех заранее фиксированных направлений. </li><li> Считается, что ребенок может перебраться от одной палки до другой, если расстояние между ними не превышает <span class="tex-span"><i>h</i></span> и они торчат в одном и том же направлении. Если ребенок стоит на земле, то он может залезть на любую из палок на высоте от <span class="tex-span">1</span> до <span class="tex-span"><i>h</i></span>. В конструкции Манао ребенок должен суметь с земли добраться до хотя бы одной из палок на высоте <span class="tex-span"><i>n</i> - <i>h</i> + 1, <i>n</i> - <i>h</i> + 2, ..., <i>n</i></span>. </li></ul></p><p><center> <img class="tex-graphics" src="http://codeforces.ru/renderer/0fb5cd7ba57dd869ba3371698734b7714cba4014.png" /> <span class="tex-font-size-script">Слева на рисунке изображен вид обычной шведской стенки, а справа — конструкция, которую разработал Манао</span> </center></p><p>Манао интересует, сколько существует различных дизайнов конструкции, удовлетворяющих его требованиям. Так как это число может оказаться очень большим, найдите его остаток от деления на <span class="tex-span">1000000009 (10<sup class="upper-index">9</sup> + 9)</span>. Два дизайна считаются различными, если найдется такая высота <span class="tex-span"><i>i</i></span>, что палки на высоте <span class="tex-span"><i>i</i></span> в этих дизайнах торчат не в одном и том же направлении.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В единственной строке записаны через пробел два целых числа <span class="tex-span"><i>n</i></span> и <span class="tex-span"><i>h</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 1000</span>, <span class="tex-span">1 ≤ <i>h</i> ≤ <i>min</i>(30, <i>n</i>)</span>).</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В единственной строке выведите остаток от деления количества дизайнов на <span class="tex-span">1000000009 (10<sup class="upper-index">9</sup> + 9)</span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>5 1<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>4<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>148<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4 3<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>256<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>5 2<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>376<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Рассмотрим несколько дизайнов при <span class="tex-span"><i>h</i> = 2</span>. Дизайн, в котором первая палка торчит в направлении <span class="tex-span"><i>d</i><sub class="lower-index">1</sub></span>, вторая — в направлении <span class="tex-span"><i>d</i><sub class="lower-index">2</sub></span> и так далее (<span class="tex-span">1 ≤ <i>d</i><sub class="lower-index"><i>i</i></sub> ≤ 4</span>), будем обозначать строкой <span class="tex-span"><i>d</i><sub class="lower-index">1</sub></span><span class="tex-span"><i>d</i><sub class="lower-index">2</sub></span><span class="tex-span">...</span><span class="tex-span"><i>d</i><sub class="lower-index"><i>n</i></sub></span>.</p><p>Дизайн «1231» (первые три палки торчат в разных направлениях, последняя — в том же, что и первая). Ни до палки на высоте 3, ни до палки на высоте 4 ребенок добраться не может.</p><p>Дизайн «414141». Ребенок может добраться до палки на высоте 5, взобравшись изначально на первую палку, с нее — на третью и с третьей на пятую. Также он может добраться до палки на высоте 6 по маршруту: вторая <span class="tex-span"> → </span> четвертая <span class="tex-span"> → </span> шестая палки.</p><p>Дизайн «123333». До верхних двух палок добраться невозможно.</p><p>Дизайн «323323». Можно добраться до палки на высоте 6 по маршруту: первая <span class="tex-span"> → </span> третья <span class="tex-span"> → </span> четвертая <span class="tex-span"> → </span> шестая палки.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>
        <div
                    style="margin-bottom: 2em;"
        >

<div class="ttypography"><div class="problem-statement"><div class="header"><div class="title">E. Плейлист</div><div class="time-limit"><div class="property-title">ограничение по времени на тест</div>1 секунда</div><div class="memory-limit"><div class="property-title">ограничение по памяти на тест</div>256 мегабайт</div><div class="input-file"><div class="property-title">ввод</div>стандартный ввод</div><div class="output-file"><div class="property-title">вывод</div>стандартный вывод</div></div><div><p>Друзья Манао часто присылают ему новые песни. Обычно он слушает их не сразу, а собирает их в плейлист. Когда он чувствует, что его ум открыт для новой музыки, он включает этот плейлист и начинает прослушивать песни.</p><p>Конечно, Манао нравится далеко не каждая песня. Чтобы получить побольше удовольствия от присланных песен, он придумал следующую процедуру прослушивания плейлиста:</p><p><ul> <li> Если, прослушав некоторую песню, Манао понял, что она ему понравилась, он запоминает ее и начинает слушать следующую непрослушанную песню. </li><li> Если, прослушав некоторую песню, Манао понял, что она ему не понравилась, он слушает все понравившиеся ему до этого момента песни и только потом начинает слушать следующую непрослушанную песню. </li></ul></p><p>Например, если у Манао в плейлисте четыре песни A, B, C, D (в соответствующем порядке) и ему в итоге понравятся песни A и C, тогда порядок прослушивания получится следующий:</p><p><ol> <li> Манао слушает A, ему она нравится, запоминает. </li><li> Манао слушает B, ему она не нравится, поэтому он снова слушает A. </li><li> Манао слушает C, песня ему нравится и он ее тоже запоминает. </li><li> Манао слушает D, не получает от нее удовольствия и заново слушает песни A и C. </li></ol></p><p>То есть в итоге Манао прослушает три раза песню A, два раза песню C и по одному разу песни B и D. Заметим, что если песня однажды понравилась Манао, она не может разонравиться ему при следующем прослушивании.</p><p>Манао прислали <span class="tex-span"><i>n</i></span> песен: <span class="tex-span"><i>i</i></span>-ая из них длится <span class="tex-span"><i>l</i><sub class="lower-index"><i>i</i></sub></span> секунд и может понравиться Манао с вероятностью <span class="tex-span"><i>p</i><sub class="lower-index"><i>i</i></sub></span> процентов. Песни могли попасть в плейлист Манао в любом порядке, поэтому Манао хочет знать максимальное математическое ожидание количества секунд, после которого процесс прослушивания закончится, по всем возможным перестановкам песен в плейлисте.</p></div><div class="input-specification"><div class="section-title">Входные данные</div><p>В первой строке записано единственное целое число <span class="tex-span"><i>n</i></span> (<span class="tex-span">1 ≤ <i>n</i> ≤ 50000</span>). В <span class="tex-span"><i>i</i></span>-ой из следующих <span class="tex-span"><i>n</i></span> строк записаны два целых числа, разделенные одним пробелом — <span class="tex-span"><i>l</i><sub class="lower-index"><i>i</i></sub></span> и <span class="tex-span"><i>p</i><sub class="lower-index"><i>i</i></sub></span> (<span class="tex-span">15 ≤ <i>l</i><sub class="lower-index"><i>i</i></sub> ≤ 1000</span>, <span class="tex-span">0 ≤ <i>p</i><sub class="lower-index"><i>i</i></sub> ≤ 100</span>) — длина <span class="tex-span"><i>i</i></span>-той песни в секундах и вероятность, того что эта песня понравится Манао, в процентах.</p></div><div class="output-specification"><div class="section-title">Выходные данные</div><p>В единственной строке выведите одно вещественное число — максимальное по всем перестановкам песен математическое ожидание длительности процесса прослушивания. Ответ будет считаться верным, если абсолютная или относительная погрешность не будет превышать <span class="tex-span">10<sup class="upper-index"> - 9</sup></span>.</p></div><div class="sample-tests"><div class="section-title">Примеры тестов</div><div class="sample-test"><div class="input"><div class="title">Входные данные</div><pre>3<br />150 20<br />150 50<br />100 50<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>537.500000000<br /></pre></div><div class="input"><div class="title">Входные данные</div><pre>4<br />300 0<br />300 50<br />240 50<br />360 80<br /></pre></div><div class="output"><div class="title">Выходные данные</div><pre>2121.000000000<br /></pre></div></div></div><div class="note"><div class="section-title">Примечание</div><p>Рассмотрим первый тестовый пример. Если слушать песни в том порядке, в котором они заданы изначально, математическое ожидание будет равно 467.5 секунд. Максимальное математическое ожидание получается, если переставить первую песню в конец плейлиста.</p><p>Рассмотрим второй тестовый пример. Песню длиной 360 секунд нужно слушать первой, а песню длиной 300 секунд, которая определенно не понравится Манао — последней.</p></div></div></div>

<script type="text/javascript">
    $(document).ready(function() {
        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();

        if (!endsWith(inputFile, "стандартный ввод")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "стандартный вывод")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }
    });
</script>
        </div>

    <br style="clear:both;"/>

    <div id="footer">
        <div><a href="http://codeforces.ru/">Codeforces</a> (c) Copyright 2010-2013 Михаил Мирзаянов</div>
        <div>Соревнования по программированию 2.0</div>

    </div>
</div>
</div>
</body>
</html>                                       
